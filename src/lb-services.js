// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbServices";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.User
 * @header lbServices.User
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `User` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "User",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Users/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use User.accessTokens.findById() instead.
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.accessTokens.destroyById() instead.
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.accessTokens.updateById() instead.
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.accessTokens() instead.
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Users/:id/accessTokens",
              method: "GET",
            },

            // INTERNAL. Use User.accessTokens.create() instead.
            "prototype$__create__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens",
              method: "POST",
            },

            // INTERNAL. Use User.accessTokens.destroyAll() instead.
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens",
              method: "DELETE",
            },

            // INTERNAL. Use User.accessTokens.count() instead.
            "prototype$__count__accessTokens": {
              url: urlBase + "/Users/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#create
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createMany
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Users",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#upsert
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Users",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#replaceOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Users/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#exists
             * @methodOf lbServices.User
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Users/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Users/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#replaceById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Users/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#find
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Users",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#findOne
             * @methodOf lbServices.User
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Users/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#updateAll
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Users/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#deleteById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Users/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#count
             * @methodOf lbServices.User
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Users/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#prototype$updateAttributes
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Users/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#createChangeStream
             * @methodOf lbServices.User
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Users/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#login
             * @methodOf lbServices.User
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Users/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#logout
             * @methodOf lbServices.User
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Users/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#confirm
             * @methodOf lbServices.User
             *
             * @description
             *
             * Confirm a user registration with email verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Users/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#resetPassword
             * @methodOf lbServices.User
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Users/reset",
              method: "POST",
            },

            // INTERNAL. Use AccessToken.user() instead.
            "::get::AccessToken::user": {
              url: urlBase + "/AccessTokens/:id/user",
              method: "GET",
            },

            // INTERNAL. Use Customer.createdBy() instead.
            "::get::Customer::createdBy": {
              url: urlBase + "/Customers/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Customer.createManydBy() instead.
            "::get::Customer::createManydBy": {
              isArray: true,
              url: urlBase + "/Customers/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Customer.lastUpdatedBy() instead.
            "::get::Customer::lastUpdatedBy": {
              url: urlBase + "/Customers/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Equipment.createdBy() instead.
            "::get::Equipment::createdBy": {
              url: urlBase + "/Equipment/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Equipment.createManydBy() instead.
            "::get::Equipment::createManydBy": {
              isArray: true,
              url: urlBase + "/Equipment/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Equipment.lastUpdatedBy() instead.
            "::get::Equipment::lastUpdatedBy": {
              url: urlBase + "/Equipment/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Report.createdBy() instead.
            "::get::Report::createdBy": {
              url: urlBase + "/Reports/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Report.createManydBy() instead.
            "::get::Report::createManydBy": {
              isArray: true,
              url: urlBase + "/Reports/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Report.lastUpdatedBy() instead.
            "::get::Report::lastUpdatedBy": {
              url: urlBase + "/Reports/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Report.user() instead.
            "::get::Report::user": {
              url: urlBase + "/Reports/:id/user",
              method: "GET",
            },

            // INTERNAL. Use Report.user.create() instead.
            "::create::Report::user": {
              url: urlBase + "/Reports/:id/user",
              method: "POST",
            },

            // INTERNAL. Use Report.user.createMany() instead.
            "::createMany::Report::user": {
              isArray: true,
              url: urlBase + "/Reports/:id/user",
              method: "POST",
            },

            // INTERNAL. Use Report.user.update() instead.
            "::update::Report::user": {
              url: urlBase + "/Reports/:id/user",
              method: "PUT",
            },

            // INTERNAL. Use Report.user.destroy() instead.
            "::destroy::Report::user": {
              url: urlBase + "/Reports/:id/user",
              method: "DELETE",
            },

            // INTERNAL. Use Contact.user() instead.
            "::get::Contact::user": {
              url: urlBase + "/Contacts/:id/user",
              method: "GET",
            },

            // INTERNAL. Use Contact.user.create() instead.
            "::create::Contact::user": {
              url: urlBase + "/Contacts/:id/user",
              method: "POST",
            },

            // INTERNAL. Use Contact.user.createMany() instead.
            "::createMany::Contact::user": {
              isArray: true,
              url: urlBase + "/Contacts/:id/user",
              method: "POST",
            },

            // INTERNAL. Use Contact.user.update() instead.
            "::update::Contact::user": {
              url: urlBase + "/Contacts/:id/user",
              method: "PUT",
            },

            // INTERNAL. Use Contact.user.destroy() instead.
            "::destroy::Contact::user": {
              url: urlBase + "/Contacts/:id/user",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.createdBy() instead.
            "::get::Employee::createdBy": {
              url: urlBase + "/Employees/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Employee.createManydBy() instead.
            "::get::Employee::createManydBy": {
              isArray: true,
              url: urlBase + "/Employees/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Employee.lastUpdatedBy() instead.
            "::get::Employee::lastUpdatedBy": {
              url: urlBase + "/Employees/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Employee.user.findById() instead.
            "::findById::Employee::user": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/user/:fk",
              method: "GET",
            },

            // INTERNAL. Use Employee.user.destroyById() instead.
            "::destroyById::Employee::user": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/user/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.user.updateById() instead.
            "::updateById::Employee::user": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/user/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.user() instead.
            "::get::Employee::user": {
              isArray: true,
              url: urlBase + "/Employees/:id/user",
              method: "GET",
            },

            // INTERNAL. Use Employee.user.create() instead.
            "::create::Employee::user": {
              url: urlBase + "/Employees/:id/user",
              method: "POST",
            },

            // INTERNAL. Use Employee.user.createMany() instead.
            "::createMany::Employee::user": {
              isArray: true,
              url: urlBase + "/Employees/:id/user",
              method: "POST",
            },

            // INTERNAL. Use Employee.user.destroyAll() instead.
            "::delete::Employee::user": {
              url: urlBase + "/Employees/:id/user",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.user.count() instead.
            "::count::Employee::user": {
              url: urlBase + "/Employees/:id/user/count",
              method: "GET",
            },

            // INTERNAL. Use Department.createdBy() instead.
            "::get::Department::createdBy": {
              url: urlBase + "/Departments/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Department.createManydBy() instead.
            "::get::Department::createManydBy": {
              isArray: true,
              url: urlBase + "/Departments/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Department.lastUpdatedBy() instead.
            "::get::Department::lastUpdatedBy": {
              url: urlBase + "/Departments/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Region.createdBy() instead.
            "::get::Region::createdBy": {
              url: urlBase + "/Regions/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Region.createManydBy() instead.
            "::get::Region::createManydBy": {
              isArray: true,
              url: urlBase + "/Regions/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Region.lastUpdatedBy() instead.
            "::get::Region::lastUpdatedBy": {
              url: urlBase + "/Regions/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Country.createdBy() instead.
            "::get::Country::createdBy": {
              url: urlBase + "/Countries/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Country.createManydBy() instead.
            "::get::Country::createManydBy": {
              isArray: true,
              url: urlBase + "/Countries/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Country.lastUpdatedBy() instead.
            "::get::Country::lastUpdatedBy": {
              url: urlBase + "/Countries/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Province.createdBy() instead.
            "::get::Province::createdBy": {
              url: urlBase + "/Provinces/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Province.createManydBy() instead.
            "::get::Province::createManydBy": {
              isArray: true,
              url: urlBase + "/Provinces/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Province.lastUpdatedBy() instead.
            "::get::Province::lastUpdatedBy": {
              url: urlBase + "/Provinces/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use SignIn.createdBy() instead.
            "::get::SignIn::createdBy": {
              url: urlBase + "/SignIns/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use SignIn.createManydBy() instead.
            "::get::SignIn::createManydBy": {
              isArray: true,
              url: urlBase + "/SignIns/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use SignIn.lastUpdatedBy() instead.
            "::get::SignIn::lastUpdatedBy": {
              url: urlBase + "/SignIns/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use ReportCode.createdBy() instead.
            "::get::ReportCode::createdBy": {
              url: urlBase + "/ReportCodes/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use ReportCode.createManydBy() instead.
            "::get::ReportCode::createManydBy": {
              isArray: true,
              url: urlBase + "/ReportCodes/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use ReportCode.lastUpdatedBy() instead.
            "::get::ReportCode::lastUpdatedBy": {
              url: urlBase + "/ReportCodes/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.createdBy() instead.
            "::get::Dispatch::createdBy": {
              url: urlBase + "/Dispatches/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.createManydBy() instead.
            "::get::Dispatch::createManydBy": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.lastUpdatedBy() instead.
            "::get::Dispatch::lastUpdatedBy": {
              url: urlBase + "/Dispatches/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Maintain.createdBy() instead.
            "::get::Maintain::createdBy": {
              url: urlBase + "/Maintains/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Maintain.createManydBy() instead.
            "::get::Maintain::createManydBy": {
              isArray: true,
              url: urlBase + "/Maintains/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Maintain.lastUpdatedBy() instead.
            "::get::Maintain::lastUpdatedBy": {
              url: urlBase + "/Maintains/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.createdBy() instead.
            "::get::AccessoryApplication::createdBy": {
              url: urlBase + "/AccessoryApplications/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.createManydBy() instead.
            "::get::AccessoryApplication::createManydBy": {
              isArray: true,
              url: urlBase + "/AccessoryApplications/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.lastUpdatedBy() instead.
            "::get::AccessoryApplication::lastUpdatedBy": {
              url: urlBase + "/AccessoryApplications/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use DispatchEmployee.createdBy() instead.
            "::get::DispatchEmployee::createdBy": {
              url: urlBase + "/DispatchEmployees/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use DispatchEmployee.createManydBy() instead.
            "::get::DispatchEmployee::createManydBy": {
              isArray: true,
              url: urlBase + "/DispatchEmployees/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use DispatchEmployee.lastUpdatedBy() instead.
            "::get::DispatchEmployee::lastUpdatedBy": {
              url: urlBase + "/DispatchEmployees/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use WorkLog.createdBy() instead.
            "::get::WorkLog::createdBy": {
              url: urlBase + "/WorkLogs/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use WorkLog.createManydBy() instead.
            "::get::WorkLog::createManydBy": {
              isArray: true,
              url: urlBase + "/WorkLogs/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use WorkLog.lastUpdatedBy() instead.
            "::get::WorkLog::lastUpdatedBy": {
              url: urlBase + "/WorkLogs/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use ActivationCode.createdBy() instead.
            "::get::ActivationCode::createdBy": {
              url: urlBase + "/ActivationCodes/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use ActivationCode.createManydBy() instead.
            "::get::ActivationCode::createManydBy": {
              isArray: true,
              url: urlBase + "/ActivationCodes/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use ActivationCode.lastUpdatedBy() instead.
            "::get::ActivationCode::lastUpdatedBy": {
              url: urlBase + "/ActivationCodes/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use DisposeRecord.createdBy() instead.
            "::get::DisposeRecord::createdBy": {
              url: urlBase + "/DisposeRecords/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use DisposeRecord.createManydBy() instead.
            "::get::DisposeRecord::createManydBy": {
              isArray: true,
              url: urlBase + "/DisposeRecords/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use DisposeRecord.lastUpdatedBy() instead.
            "::get::DisposeRecord::lastUpdatedBy": {
              url: urlBase + "/DisposeRecords/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use AccessoryStore.createdBy() instead.
            "::get::AccessoryStore::createdBy": {
              url: urlBase + "/AccessoryStores/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use AccessoryStore.createManydBy() instead.
            "::get::AccessoryStore::createManydBy": {
              isArray: true,
              url: urlBase + "/AccessoryStores/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use AccessoryStore.lastUpdatedBy() instead.
            "::get::AccessoryStore::lastUpdatedBy": {
              url: urlBase + "/AccessoryStores/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use ApplyAccessoryList.createdBy() instead.
            "::get::ApplyAccessoryList::createdBy": {
              url: urlBase + "/ApplyAccessoryLists/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use ApplyAccessoryList.createManydBy() instead.
            "::get::ApplyAccessoryList::createManydBy": {
              isArray: true,
              url: urlBase + "/ApplyAccessoryLists/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use ApplyAccessoryList.lastUpdatedBy() instead.
            "::get::ApplyAccessoryList::lastUpdatedBy": {
              url: urlBase + "/ApplyAccessoryLists/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use SummaryStatement.createdBy() instead.
            "::get::SummaryStatement::createdBy": {
              url: urlBase + "/SummaryStatements/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use SummaryStatement.createManydBy() instead.
            "::get::SummaryStatement::createManydBy": {
              isArray: true,
              url: urlBase + "/SummaryStatements/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use SummaryStatement.lastUpdatedBy() instead.
            "::get::SummaryStatement::lastUpdatedBy": {
              url: urlBase + "/SummaryStatements/:id/lastUpdatedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.User#getCurrent
             * @methodOf lbServices.User
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Users" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.User#patchOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.User#updateOrCreate
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.User#update
             * @methodOf lbServices.User
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.User#destroyById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.User#removeById
             * @methodOf lbServices.User
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.User#patchAttributes
             * @methodOf lbServices.User
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.User#getCachedCurrent
         * @methodOf lbServices.User
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.User#login} or
         * {@link lbServices.User#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A User instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#isAuthenticated
         * @methodOf lbServices.User
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#getCurrentId
         * @methodOf lbServices.User
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.User#modelName
        * @propertyOf lbServices.User
        * @description
        * The name of the model represented by this $resource,
        * i.e. `User`.
        */
        R.modelName = "User";

    /**
     * @ngdoc object
     * @name lbServices.User.accessTokens
     * @header lbServices.User.accessTokens
     * @object
     * @description
     *
     * The object `User.accessTokens` groups methods
     * manipulating `AccessToken` instances related to `User`.
     *
     * Call {@link lbServices.User#accessTokens User.accessTokens()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.User#accessTokens
             * @methodOf lbServices.User
             *
             * @description
             *
             * Queries accessTokens of User.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::get::User::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#count
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Counts accessTokens of User.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.accessTokens.count = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::count::User::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#create
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens.create = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::create::User::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#createMany
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens.createMany = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::createMany::User::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#destroyAll
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accessTokens.destroyAll = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::delete::User::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#destroyById
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accessTokens.destroyById = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::destroyById::User::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#findById
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens.findById = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::findById::User::accessTokens"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.User.accessTokens#updateById
             * @methodOf lbServices.User.accessTokens
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - User id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R.accessTokens.updateById = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::updateById::User::accessTokens"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AccessToken
 * @header lbServices.AccessToken
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AccessToken` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AccessToken",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/AccessTokens/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use AccessToken.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/AccessTokens/:id/user",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#create
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/AccessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#createMany
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/AccessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#upsert
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/AccessTokens",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#replaceOrCreate
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/AccessTokens/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#exists
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/AccessTokens/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#findById
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/AccessTokens/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#replaceById
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/AccessTokens/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#find
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/AccessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#findOne
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/AccessTokens/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#updateAll
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/AccessTokens/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#deleteById
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/AccessTokens/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#count
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/AccessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#prototype$updateAttributes
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/AccessTokens/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#createChangeStream
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/AccessTokens/change-stream",
              method: "POST",
            },

            // INTERNAL. Use User.accessTokens.findById() instead.
            "::findById::User::accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "GET",
            },

            // INTERNAL. Use User.accessTokens.destroyById() instead.
            "::destroyById::User::accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use User.accessTokens.updateById() instead.
            "::updateById::User::accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Users/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use User.accessTokens() instead.
            "::get::User::accessTokens": {
              isArray: true,
              url: urlBase + "/Users/:id/accessTokens",
              method: "GET",
            },

            // INTERNAL. Use User.accessTokens.create() instead.
            "::create::User::accessTokens": {
              url: urlBase + "/Users/:id/accessTokens",
              method: "POST",
            },

            // INTERNAL. Use User.accessTokens.createMany() instead.
            "::createMany::User::accessTokens": {
              isArray: true,
              url: urlBase + "/Users/:id/accessTokens",
              method: "POST",
            },

            // INTERNAL. Use User.accessTokens.destroyAll() instead.
            "::delete::User::accessTokens": {
              url: urlBase + "/Users/:id/accessTokens",
              method: "DELETE",
            },

            // INTERNAL. Use User.accessTokens.count() instead.
            "::count::User::accessTokens": {
              url: urlBase + "/Users/:id/accessTokens/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AccessToken#patchOrCreate
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#updateOrCreate
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#update
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#destroyById
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#removeById
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AccessToken#patchAttributes
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessToken` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.AccessToken#modelName
        * @propertyOf lbServices.AccessToken
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AccessToken`.
        */
        R.modelName = "AccessToken";


            /**
             * @ngdoc method
             * @name lbServices.AccessToken#user
             * @methodOf lbServices.AccessToken
             *
             * @description
             *
             * Fetches belongsTo relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::AccessToken::user"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ACL
 * @header lbServices.ACL
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ACL` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ACL",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ACLs/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ACL#create
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ACLs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ACL#createMany
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ACLs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ACL#upsert
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ACLs",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ACL#replaceOrCreate
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ACLs/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ACL#exists
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ACLs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ACL#findById
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ACLs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ACL#replaceById
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ACLs/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ACL#find
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ACLs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ACL#findOne
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ACLs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ACL#updateAll
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ACLs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ACL#deleteById
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ACLs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ACL#count
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ACLs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ACL#prototype$updateAttributes
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ACLs/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ACL#createChangeStream
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ACLs/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ACL#patchOrCreate
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ACL#updateOrCreate
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ACL#update
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ACL#destroyById
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ACL#removeById
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ACL#patchAttributes
             * @methodOf lbServices.ACL
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ACL` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ACL#modelName
        * @propertyOf lbServices.ACL
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ACL`.
        */
        R.modelName = "ACL";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.RoleMapping
 * @header lbServices.RoleMapping
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RoleMapping` model.
 *
 * **Details**
 *
 * Map principals to roles
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "RoleMapping",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/RoleMappings/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use RoleMapping.role() instead.
            "prototype$__get__role": {
              url: urlBase + "/RoleMappings/:id/role",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#create
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/RoleMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#createMany
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/RoleMappings",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#upsert
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/RoleMappings",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#replaceOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/RoleMappings/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#exists
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/RoleMappings/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#findById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/RoleMappings/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#replaceById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/RoleMappings/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#find
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/RoleMappings",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#findOne
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/RoleMappings/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateAll
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/RoleMappings/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#deleteById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/RoleMappings/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#count
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/RoleMappings/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#prototype$updateAttributes
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/RoleMappings/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#createChangeStream
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/RoleMappings/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.findById() instead.
            "::findById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.destroyById() instead.
            "::destroyById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.updateById() instead.
            "::updateById::Role::principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Role.principals() instead.
            "::get::Role::principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.create() instead.
            "::create::Role::principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.createMany() instead.
            "::createMany::Role::principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.destroyAll() instead.
            "::delete::Role::principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.count() instead.
            "::count::Role::principals": {
              url: urlBase + "/Roles/:id/principals/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#patchOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#updateOrCreate
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#update
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#destroyById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#removeById
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#patchAttributes
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.RoleMapping#modelName
        * @propertyOf lbServices.RoleMapping
        * @description
        * The name of the model represented by this $resource,
        * i.e. `RoleMapping`.
        */
        R.modelName = "RoleMapping";


            /**
             * @ngdoc method
             * @name lbServices.RoleMapping#role
             * @methodOf lbServices.RoleMapping
             *
             * @description
             *
             * Fetches belongsTo relation role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R.role = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::get::RoleMapping::role"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Role
 * @header lbServices.Role
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Role` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Role",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Roles/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Role.principals.findById() instead.
            "prototype$__findById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.destroyById() instead.
            "prototype$__destroyById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.updateById() instead.
            "prototype$__updateById__principals": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Roles/:id/principals/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Role.principals() instead.
            "prototype$__get__principals": {
              isArray: true,
              url: urlBase + "/Roles/:id/principals",
              method: "GET",
            },

            // INTERNAL. Use Role.principals.create() instead.
            "prototype$__create__principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "POST",
            },

            // INTERNAL. Use Role.principals.destroyAll() instead.
            "prototype$__delete__principals": {
              url: urlBase + "/Roles/:id/principals",
              method: "DELETE",
            },

            // INTERNAL. Use Role.principals.count() instead.
            "prototype$__count__principals": {
              url: urlBase + "/Roles/:id/principals/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#create
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Roles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#createMany
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Roles",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#upsert
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Roles",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#replaceOrCreate
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Roles/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#exists
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Roles/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#findById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Roles/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#replaceById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Roles/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#find
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Roles",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#findOne
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Roles/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#updateAll
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Roles/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#deleteById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Roles/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#count
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Roles/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#prototype$updateAttributes
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Roles/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Role#createChangeStream
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Roles/change-stream",
              method: "POST",
            },

            // INTERNAL. Use RoleMapping.role() instead.
            "::get::RoleMapping::role": {
              url: urlBase + "/RoleMappings/:id/role",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Role#patchOrCreate
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Role#updateOrCreate
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Role#update
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Role#destroyById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Role#removeById
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Role#patchAttributes
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Role` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Role#modelName
        * @propertyOf lbServices.Role
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Role`.
        */
        R.modelName = "Role";

    /**
     * @ngdoc object
     * @name lbServices.Role.principals
     * @header lbServices.Role.principals
     * @object
     * @description
     *
     * The object `Role.principals` groups methods
     * manipulating `RoleMapping` instances related to `Role`.
     *
     * Call {@link lbServices.Role#principals Role.principals()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Role#principals
             * @methodOf lbServices.Role
             *
             * @description
             *
             * Queries principals of Role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::get::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#count
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Counts principals of Role.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.principals.count = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::count::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#create
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Creates a new instance in principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.create = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::create::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#createMany
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Creates a new instance in principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.createMany = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::createMany::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#destroyAll
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Deletes all principals of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.principals.destroyAll = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::delete::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#destroyById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Delete a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.principals.destroyById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::destroyById::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#findById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Find a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.findById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::findById::Role::principals"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Role.principals#updateById
             * @methodOf lbServices.Role.principals
             *
             * @description
             *
             * Update a related item by id for principals.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for principals
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `RoleMapping` object.)
             * </em>
             */
        R.principals.updateById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::updateById::Role::principals"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Customer
 * @header lbServices.Customer
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Customer` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Customer",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Customers/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Customer.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/Customers/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Customer.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/Customers/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Customer.equipments.findById() instead.
            "prototype$__findById__equipments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/equipments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.equipments.destroyById() instead.
            "prototype$__destroyById__equipments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/equipments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.equipments.updateById() instead.
            "prototype$__updateById__equipments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/equipments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.contacts.findById() instead.
            "prototype$__findById__contacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/contacts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.contacts.destroyById() instead.
            "prototype$__destroyById__contacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/contacts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.contacts.updateById() instead.
            "prototype$__updateById__contacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/contacts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.employee() instead.
            "prototype$__get__employee": {
              url: urlBase + "/Customers/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use Customer.equipments() instead.
            "prototype$__get__equipments": {
              isArray: true,
              url: urlBase + "/Customers/:id/equipments",
              method: "GET",
            },

            // INTERNAL. Use Customer.equipments.create() instead.
            "prototype$__create__equipments": {
              url: urlBase + "/Customers/:id/equipments",
              method: "POST",
            },

            // INTERNAL. Use Customer.equipments.destroyAll() instead.
            "prototype$__delete__equipments": {
              url: urlBase + "/Customers/:id/equipments",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.equipments.count() instead.
            "prototype$__count__equipments": {
              url: urlBase + "/Customers/:id/equipments/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.contacts() instead.
            "prototype$__get__contacts": {
              isArray: true,
              url: urlBase + "/Customers/:id/contacts",
              method: "GET",
            },

            // INTERNAL. Use Customer.contacts.create() instead.
            "prototype$__create__contacts": {
              url: urlBase + "/Customers/:id/contacts",
              method: "POST",
            },

            // INTERNAL. Use Customer.contacts.destroyAll() instead.
            "prototype$__delete__contacts": {
              url: urlBase + "/Customers/:id/contacts",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.contacts.count() instead.
            "prototype$__count__contacts": {
              url: urlBase + "/Customers/:id/contacts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#create
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Customers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#createMany
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Customers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#upsert
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Customers",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#replaceOrCreate
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Customers/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#exists
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Customers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#findById
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Customers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#replaceById
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Customers/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#find
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Customers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#findOne
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Customers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#updateAll
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Customers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#deleteById
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Customers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#count
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Customers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#prototype$updateAttributes
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Customers/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#createChangeStream
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Customers/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Equipment.customer() instead.
            "::get::Equipment::customer": {
              url: urlBase + "/Equipment/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use Contact.customer() instead.
            "::get::Contact::customer": {
              url: urlBase + "/Contacts/:id/customer",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Customer#patchOrCreate
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Customer#updateOrCreate
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Customer#update
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Customer#destroyById
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Customer#removeById
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Customer#patchAttributes
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Customer#modelName
        * @propertyOf lbServices.Customer
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Customer`.
        */
        R.modelName = "Customer";

    /**
     * @ngdoc object
     * @name lbServices.Customer.createdBy
     * @header lbServices.Customer.createdBy
     * @object
     * @description
     *
     * The object `Customer.createdBy` groups methods
     * manipulating `User` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#createdBy Customer.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#createManydBy
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Customer::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer#createdBy
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Customer::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer#lastUpdatedBy
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Customer::lastUpdatedBy"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Customer.equipments
     * @header lbServices.Customer.equipments
     * @object
     * @description
     *
     * The object `Customer.equipments` groups methods
     * manipulating `Equipment` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#equipments Customer.equipments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#equipments
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Queries equipments of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R.equipments = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::get::Customer::equipments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.equipments#count
             * @methodOf lbServices.Customer.equipments
             *
             * @description
             *
             * Counts equipments of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.equipments.count = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::count::Customer::equipments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.equipments#create
             * @methodOf lbServices.Customer.equipments
             *
             * @description
             *
             * Creates a new instance in equipments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R.equipments.create = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::create::Customer::equipments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.equipments#createMany
             * @methodOf lbServices.Customer.equipments
             *
             * @description
             *
             * Creates a new instance in equipments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R.equipments.createMany = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::createMany::Customer::equipments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.equipments#destroyAll
             * @methodOf lbServices.Customer.equipments
             *
             * @description
             *
             * Deletes all equipments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.equipments.destroyAll = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::delete::Customer::equipments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.equipments#destroyById
             * @methodOf lbServices.Customer.equipments
             *
             * @description
             *
             * Delete a related item by id for equipments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for equipments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.equipments.destroyById = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::destroyById::Customer::equipments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.equipments#findById
             * @methodOf lbServices.Customer.equipments
             *
             * @description
             *
             * Find a related item by id for equipments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for equipments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R.equipments.findById = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::findById::Customer::equipments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.equipments#updateById
             * @methodOf lbServices.Customer.equipments
             *
             * @description
             *
             * Update a related item by id for equipments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for equipments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R.equipments.updateById = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::updateById::Customer::equipments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Customer.contacts
     * @header lbServices.Customer.contacts
     * @object
     * @description
     *
     * The object `Customer.contacts` groups methods
     * manipulating `Contact` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#contacts Customer.contacts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#contacts
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Queries contacts of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
        R.contacts = function() {
          var TargetResource = $injector.get("Contact");
          var action = TargetResource["::get::Customer::contacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.contacts#count
             * @methodOf lbServices.Customer.contacts
             *
             * @description
             *
             * Counts contacts of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.contacts.count = function() {
          var TargetResource = $injector.get("Contact");
          var action = TargetResource["::count::Customer::contacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.contacts#create
             * @methodOf lbServices.Customer.contacts
             *
             * @description
             *
             * Creates a new instance in contacts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
        R.contacts.create = function() {
          var TargetResource = $injector.get("Contact");
          var action = TargetResource["::create::Customer::contacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.contacts#createMany
             * @methodOf lbServices.Customer.contacts
             *
             * @description
             *
             * Creates a new instance in contacts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
        R.contacts.createMany = function() {
          var TargetResource = $injector.get("Contact");
          var action = TargetResource["::createMany::Customer::contacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.contacts#destroyAll
             * @methodOf lbServices.Customer.contacts
             *
             * @description
             *
             * Deletes all contacts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contacts.destroyAll = function() {
          var TargetResource = $injector.get("Contact");
          var action = TargetResource["::delete::Customer::contacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.contacts#destroyById
             * @methodOf lbServices.Customer.contacts
             *
             * @description
             *
             * Delete a related item by id for contacts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for contacts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contacts.destroyById = function() {
          var TargetResource = $injector.get("Contact");
          var action = TargetResource["::destroyById::Customer::contacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.contacts#findById
             * @methodOf lbServices.Customer.contacts
             *
             * @description
             *
             * Find a related item by id for contacts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for contacts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
        R.contacts.findById = function() {
          var TargetResource = $injector.get("Contact");
          var action = TargetResource["::findById::Customer::contacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.contacts#updateById
             * @methodOf lbServices.Customer.contacts
             *
             * @description
             *
             * Update a related item by id for contacts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for contacts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
        R.contacts.updateById = function() {
          var TargetResource = $injector.get("Contact");
          var action = TargetResource["::updateById::Customer::contacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer#employee
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Fetches belongsTo relation employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::Customer::employee"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Equipment
 * @header lbServices.Equipment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Equipment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Equipment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Equipment/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Equipment.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/Equipment/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Equipment.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/Equipment/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Equipment.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/Equipment/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use Equipment.reports.findById() instead.
            "prototype$__findById__reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/reports/:fk",
              method: "GET",
            },

            // INTERNAL. Use Equipment.reports.destroyById() instead.
            "prototype$__destroyById__reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/reports/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.reports.updateById() instead.
            "prototype$__updateById__reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/reports/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Equipment.exposureCounts.findById() instead.
            "prototype$__findById__exposureCounts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/exposureCounts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Equipment.exposureCounts.destroyById() instead.
            "prototype$__destroyById__exposureCounts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/exposureCounts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.exposureCounts.updateById() instead.
            "prototype$__updateById__exposureCounts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/exposureCounts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Equipment.dispatchLists.findById() instead.
            "prototype$__findById__dispatchLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/dispatchLists/:fk",
              method: "GET",
            },

            // INTERNAL. Use Equipment.dispatchLists.destroyById() instead.
            "prototype$__destroyById__dispatchLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/dispatchLists/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.dispatchLists.updateById() instead.
            "prototype$__updateById__dispatchLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/dispatchLists/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Equipment.accessoryList.findById() instead.
            "prototype$__findById__accessoryList": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/accessoryList/:fk",
              method: "GET",
            },

            // INTERNAL. Use Equipment.accessoryList.destroyById() instead.
            "prototype$__destroyById__accessoryList": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/accessoryList/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.accessoryList.updateById() instead.
            "prototype$__updateById__accessoryList": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/accessoryList/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Equipment.reports() instead.
            "prototype$__get__reports": {
              isArray: true,
              url: urlBase + "/Equipment/:id/reports",
              method: "GET",
            },

            // INTERNAL. Use Equipment.reports.create() instead.
            "prototype$__create__reports": {
              url: urlBase + "/Equipment/:id/reports",
              method: "POST",
            },

            // INTERNAL. Use Equipment.reports.destroyAll() instead.
            "prototype$__delete__reports": {
              url: urlBase + "/Equipment/:id/reports",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.reports.count() instead.
            "prototype$__count__reports": {
              url: urlBase + "/Equipment/:id/reports/count",
              method: "GET",
            },

            // INTERNAL. Use Equipment.exposureCounts() instead.
            "prototype$__get__exposureCounts": {
              isArray: true,
              url: urlBase + "/Equipment/:id/exposureCounts",
              method: "GET",
            },

            // INTERNAL. Use Equipment.exposureCounts.create() instead.
            "prototype$__create__exposureCounts": {
              url: urlBase + "/Equipment/:id/exposureCounts",
              method: "POST",
            },

            // INTERNAL. Use Equipment.exposureCounts.destroyAll() instead.
            "prototype$__delete__exposureCounts": {
              url: urlBase + "/Equipment/:id/exposureCounts",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.exposureCounts.count() instead.
            "prototype$__count__exposureCounts": {
              url: urlBase + "/Equipment/:id/exposureCounts/count",
              method: "GET",
            },

            // INTERNAL. Use Equipment.dispatchLists() instead.
            "prototype$__get__dispatchLists": {
              isArray: true,
              url: urlBase + "/Equipment/:id/dispatchLists",
              method: "GET",
            },

            // INTERNAL. Use Equipment.dispatchLists.create() instead.
            "prototype$__create__dispatchLists": {
              url: urlBase + "/Equipment/:id/dispatchLists",
              method: "POST",
            },

            // INTERNAL. Use Equipment.dispatchLists.destroyAll() instead.
            "prototype$__delete__dispatchLists": {
              url: urlBase + "/Equipment/:id/dispatchLists",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.dispatchLists.count() instead.
            "prototype$__count__dispatchLists": {
              url: urlBase + "/Equipment/:id/dispatchLists/count",
              method: "GET",
            },

            // INTERNAL. Use Equipment.accessoryList() instead.
            "prototype$__get__accessoryList": {
              isArray: true,
              url: urlBase + "/Equipment/:id/accessoryList",
              method: "GET",
            },

            // INTERNAL. Use Equipment.accessoryList.create() instead.
            "prototype$__create__accessoryList": {
              url: urlBase + "/Equipment/:id/accessoryList",
              method: "POST",
            },

            // INTERNAL. Use Equipment.accessoryList.destroyAll() instead.
            "prototype$__delete__accessoryList": {
              url: urlBase + "/Equipment/:id/accessoryList",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.accessoryList.count() instead.
            "prototype$__count__accessoryList": {
              url: urlBase + "/Equipment/:id/accessoryList/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#create
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Equipment",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#createMany
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Equipment",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#upsert
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Equipment",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#replaceOrCreate
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Equipment/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#exists
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Equipment/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#findById
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Equipment/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#replaceById
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Equipment/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#find
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Equipment",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#findOne
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Equipment/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#updateAll
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Equipment/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#deleteById
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Equipment/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#count
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Equipment/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#prototype$updateAttributes
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Equipment/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#createChangeStream
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Equipment/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Equipment#getCountAndExposureCount
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method does not accept any data. Supply an empty object.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             *
             *  - `totalExposureCount` – `{number=}` -
             *
             *  - `todaysExposureCount` – `{number=}` -
             */
            "getCountAndExposureCount": {
              url: urlBase + "/Equipment/statistics",
              method: "POST",
            },

            // INTERNAL. Use Customer.equipments.findById() instead.
            "::findById::Customer::equipments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/equipments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.equipments.destroyById() instead.
            "::destroyById::Customer::equipments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/equipments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.equipments.updateById() instead.
            "::updateById::Customer::equipments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/equipments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.equipments() instead.
            "::get::Customer::equipments": {
              isArray: true,
              url: urlBase + "/Customers/:id/equipments",
              method: "GET",
            },

            // INTERNAL. Use Customer.equipments.create() instead.
            "::create::Customer::equipments": {
              url: urlBase + "/Customers/:id/equipments",
              method: "POST",
            },

            // INTERNAL. Use Customer.equipments.createMany() instead.
            "::createMany::Customer::equipments": {
              isArray: true,
              url: urlBase + "/Customers/:id/equipments",
              method: "POST",
            },

            // INTERNAL. Use Customer.equipments.destroyAll() instead.
            "::delete::Customer::equipments": {
              url: urlBase + "/Customers/:id/equipments",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.equipments.count() instead.
            "::count::Customer::equipments": {
              url: urlBase + "/Customers/:id/equipments/count",
              method: "GET",
            },

            // INTERNAL. Use Report.equipment() instead.
            "::get::Report::equipment": {
              url: urlBase + "/Reports/:id/equipment",
              method: "GET",
            },

            // INTERNAL. Use ExposureCount.equipment() instead.
            "::get::ExposureCount::equipment": {
              url: urlBase + "/ExposureCounts/:id/equipment",
              method: "GET",
            },

            // INTERNAL. Use SignIn.equipment() instead.
            "::get::SignIn::equipment": {
              url: urlBase + "/SignIns/:id/equipment",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.equipment() instead.
            "::get::Dispatch::equipment": {
              url: urlBase + "/Dispatches/:id/equipment",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.equipment() instead.
            "::get::AccessoryApplication::equipment": {
              url: urlBase + "/AccessoryApplications/:id/equipment",
              method: "GET",
            },

            // INTERNAL. Use ActivationCode.equipment() instead.
            "::get::ActivationCode::equipment": {
              url: urlBase + "/ActivationCodes/:id/equipment",
              method: "GET",
            },

            // INTERNAL. Use Accessory.equipment() instead.
            "::get::Accessory::equipment": {
              url: urlBase + "/Accessories/:id/equipment",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Equipment#patchOrCreate
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Equipment#updateOrCreate
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Equipment#update
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Equipment#destroyById
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Equipment#removeById
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Equipment#patchAttributes
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Equipment#modelName
        * @propertyOf lbServices.Equipment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Equipment`.
        */
        R.modelName = "Equipment";

    /**
     * @ngdoc object
     * @name lbServices.Equipment.createdBy
     * @header lbServices.Equipment.createdBy
     * @object
     * @description
     *
     * The object `Equipment.createdBy` groups methods
     * manipulating `User` instances related to `Equipment`.
     *
     * Call {@link lbServices.Equipment#createdBy Equipment.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Equipment#createManydBy
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Equipment::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment#createdBy
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Equipment::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment#lastUpdatedBy
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Equipment::lastUpdatedBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment#customer
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::Equipment::customer"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Equipment.reports
     * @header lbServices.Equipment.reports
     * @object
     * @description
     *
     * The object `Equipment.reports` groups methods
     * manipulating `Report` instances related to `Equipment`.
     *
     * Call {@link lbServices.Equipment#reports Equipment.reports()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Equipment#reports
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Queries reports of Equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::get::Equipment::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.reports#count
             * @methodOf lbServices.Equipment.reports
             *
             * @description
             *
             * Counts reports of Equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.reports.count = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::count::Equipment::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.reports#create
             * @methodOf lbServices.Equipment.reports
             *
             * @description
             *
             * Creates a new instance in reports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports.create = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::create::Equipment::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.reports#createMany
             * @methodOf lbServices.Equipment.reports
             *
             * @description
             *
             * Creates a new instance in reports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports.createMany = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::createMany::Equipment::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.reports#destroyAll
             * @methodOf lbServices.Equipment.reports
             *
             * @description
             *
             * Deletes all reports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.reports.destroyAll = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::delete::Equipment::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.reports#destroyById
             * @methodOf lbServices.Equipment.reports
             *
             * @description
             *
             * Delete a related item by id for reports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for reports
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.reports.destroyById = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::destroyById::Equipment::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.reports#findById
             * @methodOf lbServices.Equipment.reports
             *
             * @description
             *
             * Find a related item by id for reports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for reports
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports.findById = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::findById::Equipment::reports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.reports#updateById
             * @methodOf lbServices.Equipment.reports
             *
             * @description
             *
             * Update a related item by id for reports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for reports
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.reports.updateById = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::updateById::Equipment::reports"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Equipment.exposureCounts
     * @header lbServices.Equipment.exposureCounts
     * @object
     * @description
     *
     * The object `Equipment.exposureCounts` groups methods
     * manipulating `ExposureCount` instances related to `Equipment`.
     *
     * Call {@link lbServices.Equipment#exposureCounts Equipment.exposureCounts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Equipment#exposureCounts
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Queries exposureCounts of Equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
        R.exposureCounts = function() {
          var TargetResource = $injector.get("ExposureCount");
          var action = TargetResource["::get::Equipment::exposureCounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.exposureCounts#count
             * @methodOf lbServices.Equipment.exposureCounts
             *
             * @description
             *
             * Counts exposureCounts of Equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.exposureCounts.count = function() {
          var TargetResource = $injector.get("ExposureCount");
          var action = TargetResource["::count::Equipment::exposureCounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.exposureCounts#create
             * @methodOf lbServices.Equipment.exposureCounts
             *
             * @description
             *
             * Creates a new instance in exposureCounts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
        R.exposureCounts.create = function() {
          var TargetResource = $injector.get("ExposureCount");
          var action = TargetResource["::create::Equipment::exposureCounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.exposureCounts#createMany
             * @methodOf lbServices.Equipment.exposureCounts
             *
             * @description
             *
             * Creates a new instance in exposureCounts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
        R.exposureCounts.createMany = function() {
          var TargetResource = $injector.get("ExposureCount");
          var action = TargetResource["::createMany::Equipment::exposureCounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.exposureCounts#destroyAll
             * @methodOf lbServices.Equipment.exposureCounts
             *
             * @description
             *
             * Deletes all exposureCounts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.exposureCounts.destroyAll = function() {
          var TargetResource = $injector.get("ExposureCount");
          var action = TargetResource["::delete::Equipment::exposureCounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.exposureCounts#destroyById
             * @methodOf lbServices.Equipment.exposureCounts
             *
             * @description
             *
             * Delete a related item by id for exposureCounts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for exposureCounts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.exposureCounts.destroyById = function() {
          var TargetResource = $injector.get("ExposureCount");
          var action = TargetResource["::destroyById::Equipment::exposureCounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.exposureCounts#findById
             * @methodOf lbServices.Equipment.exposureCounts
             *
             * @description
             *
             * Find a related item by id for exposureCounts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for exposureCounts
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
        R.exposureCounts.findById = function() {
          var TargetResource = $injector.get("ExposureCount");
          var action = TargetResource["::findById::Equipment::exposureCounts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.exposureCounts#updateById
             * @methodOf lbServices.Equipment.exposureCounts
             *
             * @description
             *
             * Update a related item by id for exposureCounts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for exposureCounts
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
        R.exposureCounts.updateById = function() {
          var TargetResource = $injector.get("ExposureCount");
          var action = TargetResource["::updateById::Equipment::exposureCounts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Equipment.dispatchLists
     * @header lbServices.Equipment.dispatchLists
     * @object
     * @description
     *
     * The object `Equipment.dispatchLists` groups methods
     * manipulating `Dispatch` instances related to `Equipment`.
     *
     * Call {@link lbServices.Equipment#dispatchLists Equipment.dispatchLists()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Equipment#dispatchLists
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Queries dispatchLists of Equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.dispatchLists = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::get::Equipment::dispatchLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.dispatchLists#count
             * @methodOf lbServices.Equipment.dispatchLists
             *
             * @description
             *
             * Counts dispatchLists of Equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.dispatchLists.count = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::count::Equipment::dispatchLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.dispatchLists#create
             * @methodOf lbServices.Equipment.dispatchLists
             *
             * @description
             *
             * Creates a new instance in dispatchLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.dispatchLists.create = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::create::Equipment::dispatchLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.dispatchLists#createMany
             * @methodOf lbServices.Equipment.dispatchLists
             *
             * @description
             *
             * Creates a new instance in dispatchLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.dispatchLists.createMany = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::createMany::Equipment::dispatchLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.dispatchLists#destroyAll
             * @methodOf lbServices.Equipment.dispatchLists
             *
             * @description
             *
             * Deletes all dispatchLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.dispatchLists.destroyAll = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::delete::Equipment::dispatchLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.dispatchLists#destroyById
             * @methodOf lbServices.Equipment.dispatchLists
             *
             * @description
             *
             * Delete a related item by id for dispatchLists.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for dispatchLists
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.dispatchLists.destroyById = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::destroyById::Equipment::dispatchLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.dispatchLists#findById
             * @methodOf lbServices.Equipment.dispatchLists
             *
             * @description
             *
             * Find a related item by id for dispatchLists.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for dispatchLists
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.dispatchLists.findById = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::findById::Equipment::dispatchLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.dispatchLists#updateById
             * @methodOf lbServices.Equipment.dispatchLists
             *
             * @description
             *
             * Update a related item by id for dispatchLists.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for dispatchLists
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.dispatchLists.updateById = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::updateById::Equipment::dispatchLists"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Equipment.accessoryList
     * @header lbServices.Equipment.accessoryList
     * @object
     * @description
     *
     * The object `Equipment.accessoryList` groups methods
     * manipulating `Accessory` instances related to `Equipment`.
     *
     * Call {@link lbServices.Equipment#accessoryList Equipment.accessoryList()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Equipment#accessoryList
             * @methodOf lbServices.Equipment
             *
             * @description
             *
             * Queries accessoryList of Equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
        R.accessoryList = function() {
          var TargetResource = $injector.get("Accessory");
          var action = TargetResource["::get::Equipment::accessoryList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.accessoryList#count
             * @methodOf lbServices.Equipment.accessoryList
             *
             * @description
             *
             * Counts accessoryList of Equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.accessoryList.count = function() {
          var TargetResource = $injector.get("Accessory");
          var action = TargetResource["::count::Equipment::accessoryList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.accessoryList#create
             * @methodOf lbServices.Equipment.accessoryList
             *
             * @description
             *
             * Creates a new instance in accessoryList of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
        R.accessoryList.create = function() {
          var TargetResource = $injector.get("Accessory");
          var action = TargetResource["::create::Equipment::accessoryList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.accessoryList#createMany
             * @methodOf lbServices.Equipment.accessoryList
             *
             * @description
             *
             * Creates a new instance in accessoryList of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
        R.accessoryList.createMany = function() {
          var TargetResource = $injector.get("Accessory");
          var action = TargetResource["::createMany::Equipment::accessoryList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.accessoryList#destroyAll
             * @methodOf lbServices.Equipment.accessoryList
             *
             * @description
             *
             * Deletes all accessoryList of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accessoryList.destroyAll = function() {
          var TargetResource = $injector.get("Accessory");
          var action = TargetResource["::delete::Equipment::accessoryList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.accessoryList#destroyById
             * @methodOf lbServices.Equipment.accessoryList
             *
             * @description
             *
             * Delete a related item by id for accessoryList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for accessoryList
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accessoryList.destroyById = function() {
          var TargetResource = $injector.get("Accessory");
          var action = TargetResource["::destroyById::Equipment::accessoryList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.accessoryList#findById
             * @methodOf lbServices.Equipment.accessoryList
             *
             * @description
             *
             * Find a related item by id for accessoryList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for accessoryList
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
        R.accessoryList.findById = function() {
          var TargetResource = $injector.get("Accessory");
          var action = TargetResource["::findById::Equipment::accessoryList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Equipment.accessoryList#updateById
             * @methodOf lbServices.Equipment.accessoryList
             *
             * @description
             *
             * Update a related item by id for accessoryList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for accessoryList
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
        R.accessoryList.updateById = function() {
          var TargetResource = $injector.get("Accessory");
          var action = TargetResource["::updateById::Equipment::accessoryList"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Report
 * @header lbServices.Report
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Report` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Report",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Reports/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Report.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/Reports/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Report.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/Reports/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Report.equipment() instead.
            "prototype$__get__equipment": {
              url: urlBase + "/Reports/:id/equipment",
              method: "GET",
            },

            // INTERNAL. Use Report.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/Reports/:id/user",
              method: "GET",
            },

            // INTERNAL. Use Report.user.create() instead.
            "prototype$__create__user": {
              url: urlBase + "/Reports/:id/user",
              method: "POST",
            },

            // INTERNAL. Use Report.user.update() instead.
            "prototype$__update__user": {
              url: urlBase + "/Reports/:id/user",
              method: "PUT",
            },

            // INTERNAL. Use Report.user.destroy() instead.
            "prototype$__destroy__user": {
              url: urlBase + "/Reports/:id/user",
              method: "DELETE",
            },

            // INTERNAL. Use Report.customerContacts() instead.
            "prototype$__get__customerContacts": {
              url: urlBase + "/Reports/:id/customerContacts",
              method: "GET",
            },

            // INTERNAL. Use Report.employeeInCharge() instead.
            "prototype$__get__employeeInCharge": {
              url: urlBase + "/Reports/:id/employeeInCharge",
              method: "GET",
            },

            // INTERNAL. Use Report.codeInfo() instead.
            "prototype$__get__codeInfo": {
              url: urlBase + "/Reports/:id/codeInfo",
              method: "GET",
            },

            // INTERNAL. Use Report.dispatch() instead.
            "prototype$__get__dispatch": {
              url: urlBase + "/Reports/:id/dispatch",
              method: "GET",
            },

            // INTERNAL. Use Report.dispatch.create() instead.
            "prototype$__create__dispatch": {
              url: urlBase + "/Reports/:id/dispatch",
              method: "POST",
            },

            // INTERNAL. Use Report.dispatch.update() instead.
            "prototype$__update__dispatch": {
              url: urlBase + "/Reports/:id/dispatch",
              method: "PUT",
            },

            // INTERNAL. Use Report.dispatch.destroy() instead.
            "prototype$__destroy__dispatch": {
              url: urlBase + "/Reports/:id/dispatch",
              method: "DELETE",
            },

            // INTERNAL. Use Report.disposeRecords.findById() instead.
            "prototype$__findById__disposeRecords": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Reports/:id/disposeRecords/:fk",
              method: "GET",
            },

            // INTERNAL. Use Report.disposeRecords.destroyById() instead.
            "prototype$__destroyById__disposeRecords": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Reports/:id/disposeRecords/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Report.disposeRecords.updateById() instead.
            "prototype$__updateById__disposeRecords": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Reports/:id/disposeRecords/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Report.disposeRecords() instead.
            "prototype$__get__disposeRecords": {
              isArray: true,
              url: urlBase + "/Reports/:id/disposeRecords",
              method: "GET",
            },

            // INTERNAL. Use Report.disposeRecords.create() instead.
            "prototype$__create__disposeRecords": {
              url: urlBase + "/Reports/:id/disposeRecords",
              method: "POST",
            },

            // INTERNAL. Use Report.disposeRecords.destroyAll() instead.
            "prototype$__delete__disposeRecords": {
              url: urlBase + "/Reports/:id/disposeRecords",
              method: "DELETE",
            },

            // INTERNAL. Use Report.disposeRecords.count() instead.
            "prototype$__count__disposeRecords": {
              url: urlBase + "/Reports/:id/disposeRecords/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#create
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Reports",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#createMany
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Reports",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#upsert
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Reports",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#replaceOrCreate
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Reports/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#exists
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Reports/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#findById
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Reports/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#replaceById
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Reports/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#find
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Reports",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#findOne
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Reports/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#updateAll
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Reports/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#deleteById
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Reports/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#count
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Reports/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#prototype$updateAttributes
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Reports/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#createChangeStream
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Reports/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Report#addBySerialNo
             * @methodOf lbServices.Report
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `serialNo` – `{string}` -
             *
             *  - `report` – `{report}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "addBySerialNo": {
              url: urlBase + "/Reports/bySerialNo",
              method: "POST",
            },

            // INTERNAL. Use Equipment.reports.findById() instead.
            "::findById::Equipment::reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/reports/:fk",
              method: "GET",
            },

            // INTERNAL. Use Equipment.reports.destroyById() instead.
            "::destroyById::Equipment::reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/reports/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.reports.updateById() instead.
            "::updateById::Equipment::reports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/reports/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Equipment.reports() instead.
            "::get::Equipment::reports": {
              isArray: true,
              url: urlBase + "/Equipment/:id/reports",
              method: "GET",
            },

            // INTERNAL. Use Equipment.reports.create() instead.
            "::create::Equipment::reports": {
              url: urlBase + "/Equipment/:id/reports",
              method: "POST",
            },

            // INTERNAL. Use Equipment.reports.createMany() instead.
            "::createMany::Equipment::reports": {
              isArray: true,
              url: urlBase + "/Equipment/:id/reports",
              method: "POST",
            },

            // INTERNAL. Use Equipment.reports.destroyAll() instead.
            "::delete::Equipment::reports": {
              url: urlBase + "/Equipment/:id/reports",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.reports.count() instead.
            "::count::Equipment::reports": {
              url: urlBase + "/Equipment/:id/reports/count",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.report() instead.
            "::get::Dispatch::report": {
              url: urlBase + "/Dispatches/:id/report",
              method: "GET",
            },

            // INTERNAL. Use DisposeRecord.report() instead.
            "::get::DisposeRecord::report": {
              url: urlBase + "/DisposeRecords/:id/report",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Report#patchOrCreate
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Report#updateOrCreate
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Report#update
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Report#destroyById
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Report#removeById
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Report#patchAttributes
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Report#modelName
        * @propertyOf lbServices.Report
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Report`.
        */
        R.modelName = "Report";

    /**
     * @ngdoc object
     * @name lbServices.Report.createdBy
     * @header lbServices.Report.createdBy
     * @object
     * @description
     *
     * The object `Report.createdBy` groups methods
     * manipulating `User` instances related to `Report`.
     *
     * Call {@link lbServices.Report#createdBy Report.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Report#createManydBy
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Report::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report#createdBy
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Report::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report#lastUpdatedBy
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Report::lastUpdatedBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report#equipment
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Fetches belongsTo relation equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R.equipment = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::get::Report::equipment"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Report.user
     * @header lbServices.Report.user
     * @object
     * @description
     *
     * The object `Report.user` groups methods
     * manipulating `User` instances related to `Report`.
     *
     * Call {@link lbServices.Report#user Report.user()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Report#user
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Fetches hasOne relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Report::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.user#create
             * @methodOf lbServices.Report.user
             *
             * @description
             *
             * Creates a new instance in user of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::Report::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.user#createMany
             * @methodOf lbServices.Report.user
             *
             * @description
             *
             * Creates a new instance in user of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::Report::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.user#destroy
             * @methodOf lbServices.Report.user
             *
             * @description
             *
             * Deletes user of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.user.destroy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroy::Report::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.user#update
             * @methodOf lbServices.Report.user
             *
             * @description
             *
             * Update user of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user.update = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::update::Report::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report#customerContacts
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Fetches belongsTo relation customerContacts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
        R.customerContacts = function() {
          var TargetResource = $injector.get("Contact");
          var action = TargetResource["::get::Report::customerContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report#employeeInCharge
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Fetches belongsTo relation employeeInCharge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employeeInCharge = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::Report::employeeInCharge"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report#codeInfo
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Fetches belongsTo relation codeInfo.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
        R.codeInfo = function() {
          var TargetResource = $injector.get("ReportCode");
          var action = TargetResource["::get::Report::codeInfo"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Report.dispatch
     * @header lbServices.Report.dispatch
     * @object
     * @description
     *
     * The object `Report.dispatch` groups methods
     * manipulating `Dispatch` instances related to `Report`.
     *
     * Call {@link lbServices.Report#dispatch Report.dispatch()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Report#dispatch
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Fetches hasOne relation dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.dispatch = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::get::Report::dispatch"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.dispatch#create
             * @methodOf lbServices.Report.dispatch
             *
             * @description
             *
             * Creates a new instance in dispatch of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.dispatch.create = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::create::Report::dispatch"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.dispatch#createMany
             * @methodOf lbServices.Report.dispatch
             *
             * @description
             *
             * Creates a new instance in dispatch of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.dispatch.createMany = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::createMany::Report::dispatch"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.dispatch#destroy
             * @methodOf lbServices.Report.dispatch
             *
             * @description
             *
             * Deletes dispatch of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.dispatch.destroy = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::destroy::Report::dispatch"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.dispatch#update
             * @methodOf lbServices.Report.dispatch
             *
             * @description
             *
             * Update dispatch of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.dispatch.update = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::update::Report::dispatch"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Report.disposeRecords
     * @header lbServices.Report.disposeRecords
     * @object
     * @description
     *
     * The object `Report.disposeRecords` groups methods
     * manipulating `DisposeRecord` instances related to `Report`.
     *
     * Call {@link lbServices.Report#disposeRecords Report.disposeRecords()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Report#disposeRecords
             * @methodOf lbServices.Report
             *
             * @description
             *
             * Queries disposeRecords of Report.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
        R.disposeRecords = function() {
          var TargetResource = $injector.get("DisposeRecord");
          var action = TargetResource["::get::Report::disposeRecords"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.disposeRecords#count
             * @methodOf lbServices.Report.disposeRecords
             *
             * @description
             *
             * Counts disposeRecords of Report.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.disposeRecords.count = function() {
          var TargetResource = $injector.get("DisposeRecord");
          var action = TargetResource["::count::Report::disposeRecords"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.disposeRecords#create
             * @methodOf lbServices.Report.disposeRecords
             *
             * @description
             *
             * Creates a new instance in disposeRecords of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
        R.disposeRecords.create = function() {
          var TargetResource = $injector.get("DisposeRecord");
          var action = TargetResource["::create::Report::disposeRecords"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.disposeRecords#createMany
             * @methodOf lbServices.Report.disposeRecords
             *
             * @description
             *
             * Creates a new instance in disposeRecords of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
        R.disposeRecords.createMany = function() {
          var TargetResource = $injector.get("DisposeRecord");
          var action = TargetResource["::createMany::Report::disposeRecords"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.disposeRecords#destroyAll
             * @methodOf lbServices.Report.disposeRecords
             *
             * @description
             *
             * Deletes all disposeRecords of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.disposeRecords.destroyAll = function() {
          var TargetResource = $injector.get("DisposeRecord");
          var action = TargetResource["::delete::Report::disposeRecords"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.disposeRecords#destroyById
             * @methodOf lbServices.Report.disposeRecords
             *
             * @description
             *
             * Delete a related item by id for disposeRecords.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for disposeRecords
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.disposeRecords.destroyById = function() {
          var TargetResource = $injector.get("DisposeRecord");
          var action = TargetResource["::destroyById::Report::disposeRecords"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.disposeRecords#findById
             * @methodOf lbServices.Report.disposeRecords
             *
             * @description
             *
             * Find a related item by id for disposeRecords.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for disposeRecords
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
        R.disposeRecords.findById = function() {
          var TargetResource = $injector.get("DisposeRecord");
          var action = TargetResource["::findById::Report::disposeRecords"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Report.disposeRecords#updateById
             * @methodOf lbServices.Report.disposeRecords
             *
             * @description
             *
             * Update a related item by id for disposeRecords.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for disposeRecords
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
        R.disposeRecords.updateById = function() {
          var TargetResource = $injector.get("DisposeRecord");
          var action = TargetResource["::updateById::Report::disposeRecords"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Contact
 * @header lbServices.Contact
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Contact` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Contact",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Contacts/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Contact.user() instead.
            "prototype$__get__user": {
              url: urlBase + "/Contacts/:id/user",
              method: "GET",
            },

            // INTERNAL. Use Contact.user.create() instead.
            "prototype$__create__user": {
              url: urlBase + "/Contacts/:id/user",
              method: "POST",
            },

            // INTERNAL. Use Contact.user.update() instead.
            "prototype$__update__user": {
              url: urlBase + "/Contacts/:id/user",
              method: "PUT",
            },

            // INTERNAL. Use Contact.user.destroy() instead.
            "prototype$__destroy__user": {
              url: urlBase + "/Contacts/:id/user",
              method: "DELETE",
            },

            // INTERNAL. Use Contact.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/Contacts/:id/customer",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contact#create
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Contacts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contact#createMany
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Contacts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contact#upsert
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Contacts",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contact#replaceOrCreate
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Contacts/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contact#exists
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Contacts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contact#findById
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Contacts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contact#replaceById
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Contacts/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contact#find
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Contacts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contact#findOne
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Contacts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contact#updateAll
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Contacts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contact#deleteById
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Contacts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contact#count
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Contacts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contact#prototype$updateAttributes
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Contacts/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contact#createChangeStream
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Contacts/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Customer.contacts.findById() instead.
            "::findById::Customer::contacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/contacts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.contacts.destroyById() instead.
            "::destroyById::Customer::contacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/contacts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.contacts.updateById() instead.
            "::updateById::Customer::contacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/contacts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.contacts() instead.
            "::get::Customer::contacts": {
              isArray: true,
              url: urlBase + "/Customers/:id/contacts",
              method: "GET",
            },

            // INTERNAL. Use Customer.contacts.create() instead.
            "::create::Customer::contacts": {
              url: urlBase + "/Customers/:id/contacts",
              method: "POST",
            },

            // INTERNAL. Use Customer.contacts.createMany() instead.
            "::createMany::Customer::contacts": {
              isArray: true,
              url: urlBase + "/Customers/:id/contacts",
              method: "POST",
            },

            // INTERNAL. Use Customer.contacts.destroyAll() instead.
            "::delete::Customer::contacts": {
              url: urlBase + "/Customers/:id/contacts",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.contacts.count() instead.
            "::count::Customer::contacts": {
              url: urlBase + "/Customers/:id/contacts/count",
              method: "GET",
            },

            // INTERNAL. Use Report.customerContacts() instead.
            "::get::Report::customerContacts": {
              url: urlBase + "/Reports/:id/customerContacts",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Contact#patchOrCreate
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Contact#updateOrCreate
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Contact#update
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Contact#destroyById
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Contact#removeById
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Contact#patchAttributes
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contact` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Contact#modelName
        * @propertyOf lbServices.Contact
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Contact`.
        */
        R.modelName = "Contact";

    /**
     * @ngdoc object
     * @name lbServices.Contact.user
     * @header lbServices.Contact.user
     * @object
     * @description
     *
     * The object `Contact.user` groups methods
     * manipulating `User` instances related to `Contact`.
     *
     * Call {@link lbServices.Contact#user Contact.user()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Contact#user
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Fetches hasOne relation user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Contact::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Contact.user#create
             * @methodOf lbServices.Contact.user
             *
             * @description
             *
             * Creates a new instance in user of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::Contact::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Contact.user#createMany
             * @methodOf lbServices.Contact.user
             *
             * @description
             *
             * Creates a new instance in user of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::Contact::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Contact.user#destroy
             * @methodOf lbServices.Contact.user
             *
             * @description
             *
             * Deletes user of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.user.destroy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroy::Contact::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Contact.user#update
             * @methodOf lbServices.Contact.user
             *
             * @description
             *
             * Update user of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user.update = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::update::Contact::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Contact#customer
             * @methodOf lbServices.Contact
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::Contact::customer"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Employee
 * @header lbServices.Employee
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Employee` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Employee",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Employees/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Employee.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/Employees/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Employee.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/Employees/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Employee.user.findById() instead.
            "prototype$__findById__user": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/user/:fk",
              method: "GET",
            },

            // INTERNAL. Use Employee.user.destroyById() instead.
            "prototype$__destroyById__user": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/user/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.user.updateById() instead.
            "prototype$__updateById__user": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/user/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.departments.findById() instead.
            "prototype$__findById__departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/departments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Employee.departments.destroyById() instead.
            "prototype$__destroyById__departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/departments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.departments.updateById() instead.
            "prototype$__updateById__departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/departments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.departments.link() instead.
            "prototype$__link__departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/departments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.departments.unlink() instead.
            "prototype$__unlink__departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/departments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.departments.exists() instead.
            "prototype$__exists__departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/departments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Employee.appointments.findById() instead.
            "prototype$__findById__appointments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/appointments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Employee.appointments.destroyById() instead.
            "prototype$__destroyById__appointments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/appointments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.appointments.updateById() instead.
            "prototype$__updateById__appointments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/appointments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.maintains.findById() instead.
            "prototype$__findById__maintains": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/maintains/:fk",
              method: "GET",
            },

            // INTERNAL. Use Employee.maintains.destroyById() instead.
            "prototype$__destroyById__maintains": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/maintains/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.maintains.updateById() instead.
            "prototype$__updateById__maintains": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/maintains/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.accessoryApplications.findById() instead.
            "prototype$__findById__accessoryApplications": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/accessoryApplications/:fk",
              method: "GET",
            },

            // INTERNAL. Use Employee.accessoryApplications.destroyById() instead.
            "prototype$__destroyById__accessoryApplications": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/accessoryApplications/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.accessoryApplications.updateById() instead.
            "prototype$__updateById__accessoryApplications": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/accessoryApplications/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.employeeDispatches.findById() instead.
            "prototype$__findById__employeeDispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/employeeDispatches/:fk",
              method: "GET",
            },

            // INTERNAL. Use Employee.employeeDispatches.destroyById() instead.
            "prototype$__destroyById__employeeDispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/employeeDispatches/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.employeeDispatches.updateById() instead.
            "prototype$__updateById__employeeDispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/employeeDispatches/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.employeeDispatches.link() instead.
            "prototype$__link__employeeDispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/employeeDispatches/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.employeeDispatches.unlink() instead.
            "prototype$__unlink__employeeDispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/employeeDispatches/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.employeeDispatches.exists() instead.
            "prototype$__exists__employeeDispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/employeeDispatches/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Employee.dispatches.findById() instead.
            "prototype$__findById__dispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/dispatches/:fk",
              method: "GET",
            },

            // INTERNAL. Use Employee.dispatches.destroyById() instead.
            "prototype$__destroyById__dispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/dispatches/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.dispatches.updateById() instead.
            "prototype$__updateById__dispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/dispatches/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.user() instead.
            "prototype$__get__user": {
              isArray: true,
              url: urlBase + "/Employees/:id/user",
              method: "GET",
            },

            // INTERNAL. Use Employee.user.create() instead.
            "prototype$__create__user": {
              url: urlBase + "/Employees/:id/user",
              method: "POST",
            },

            // INTERNAL. Use Employee.user.destroyAll() instead.
            "prototype$__delete__user": {
              url: urlBase + "/Employees/:id/user",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.user.count() instead.
            "prototype$__count__user": {
              url: urlBase + "/Employees/:id/user/count",
              method: "GET",
            },

            // INTERNAL. Use Employee.departments() instead.
            "prototype$__get__departments": {
              isArray: true,
              url: urlBase + "/Employees/:id/departments",
              method: "GET",
            },

            // INTERNAL. Use Employee.departments.create() instead.
            "prototype$__create__departments": {
              url: urlBase + "/Employees/:id/departments",
              method: "POST",
            },

            // INTERNAL. Use Employee.departments.destroyAll() instead.
            "prototype$__delete__departments": {
              url: urlBase + "/Employees/:id/departments",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.departments.count() instead.
            "prototype$__count__departments": {
              url: urlBase + "/Employees/:id/departments/count",
              method: "GET",
            },

            // INTERNAL. Use Employee.appointments() instead.
            "prototype$__get__appointments": {
              isArray: true,
              url: urlBase + "/Employees/:id/appointments",
              method: "GET",
            },

            // INTERNAL. Use Employee.appointments.create() instead.
            "prototype$__create__appointments": {
              url: urlBase + "/Employees/:id/appointments",
              method: "POST",
            },

            // INTERNAL. Use Employee.appointments.destroyAll() instead.
            "prototype$__delete__appointments": {
              url: urlBase + "/Employees/:id/appointments",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.appointments.count() instead.
            "prototype$__count__appointments": {
              url: urlBase + "/Employees/:id/appointments/count",
              method: "GET",
            },

            // INTERNAL. Use Employee.maintains() instead.
            "prototype$__get__maintains": {
              isArray: true,
              url: urlBase + "/Employees/:id/maintains",
              method: "GET",
            },

            // INTERNAL. Use Employee.maintains.create() instead.
            "prototype$__create__maintains": {
              url: urlBase + "/Employees/:id/maintains",
              method: "POST",
            },

            // INTERNAL. Use Employee.maintains.destroyAll() instead.
            "prototype$__delete__maintains": {
              url: urlBase + "/Employees/:id/maintains",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.maintains.count() instead.
            "prototype$__count__maintains": {
              url: urlBase + "/Employees/:id/maintains/count",
              method: "GET",
            },

            // INTERNAL. Use Employee.accessoryApplications() instead.
            "prototype$__get__accessoryApplications": {
              isArray: true,
              url: urlBase + "/Employees/:id/accessoryApplications",
              method: "GET",
            },

            // INTERNAL. Use Employee.accessoryApplications.create() instead.
            "prototype$__create__accessoryApplications": {
              url: urlBase + "/Employees/:id/accessoryApplications",
              method: "POST",
            },

            // INTERNAL. Use Employee.accessoryApplications.destroyAll() instead.
            "prototype$__delete__accessoryApplications": {
              url: urlBase + "/Employees/:id/accessoryApplications",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.accessoryApplications.count() instead.
            "prototype$__count__accessoryApplications": {
              url: urlBase + "/Employees/:id/accessoryApplications/count",
              method: "GET",
            },

            // INTERNAL. Use Employee.employeeDispatches() instead.
            "prototype$__get__employeeDispatches": {
              isArray: true,
              url: urlBase + "/Employees/:id/employeeDispatches",
              method: "GET",
            },

            // INTERNAL. Use Employee.employeeDispatches.create() instead.
            "prototype$__create__employeeDispatches": {
              url: urlBase + "/Employees/:id/employeeDispatches",
              method: "POST",
            },

            // INTERNAL. Use Employee.employeeDispatches.destroyAll() instead.
            "prototype$__delete__employeeDispatches": {
              url: urlBase + "/Employees/:id/employeeDispatches",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.employeeDispatches.count() instead.
            "prototype$__count__employeeDispatches": {
              url: urlBase + "/Employees/:id/employeeDispatches/count",
              method: "GET",
            },

            // INTERNAL. Use Employee.dispatches() instead.
            "prototype$__get__dispatches": {
              isArray: true,
              url: urlBase + "/Employees/:id/dispatches",
              method: "GET",
            },

            // INTERNAL. Use Employee.dispatches.create() instead.
            "prototype$__create__dispatches": {
              url: urlBase + "/Employees/:id/dispatches",
              method: "POST",
            },

            // INTERNAL. Use Employee.dispatches.destroyAll() instead.
            "prototype$__delete__dispatches": {
              url: urlBase + "/Employees/:id/dispatches",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.dispatches.count() instead.
            "prototype$__count__dispatches": {
              url: urlBase + "/Employees/:id/dispatches/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#create
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Employees",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#createMany
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Employees",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#upsert
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Employees",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#replaceOrCreate
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Employees/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#exists
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Employees/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#findById
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Employees/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#replaceById
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Employees/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#find
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Employees",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#findOne
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Employees/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#updateAll
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Employees/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#deleteById
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Employees/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#count
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Employees/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#prototype$updateAttributes
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Employees/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Employee#createChangeStream
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Employees/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Customer.employee() instead.
            "::get::Customer::employee": {
              url: urlBase + "/Customers/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use Report.employeeInCharge() instead.
            "::get::Report::employeeInCharge": {
              url: urlBase + "/Reports/:id/employeeInCharge",
              method: "GET",
            },

            // INTERNAL. Use Department.employee.findById() instead.
            "::findById::Department::employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employee/:fk",
              method: "GET",
            },

            // INTERNAL. Use Department.employee.destroyById() instead.
            "::destroyById::Department::employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employee/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Department.employee.updateById() instead.
            "::updateById::Department::employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employee/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Department.employee.link() instead.
            "::link::Department::employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employee/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Department.employee.unlink() instead.
            "::unlink::Department::employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employee/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Department.employee.exists() instead.
            "::exists::Department::employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employee/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Department.employee() instead.
            "::get::Department::employee": {
              isArray: true,
              url: urlBase + "/Departments/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use Department.employee.create() instead.
            "::create::Department::employee": {
              url: urlBase + "/Departments/:id/employee",
              method: "POST",
            },

            // INTERNAL. Use Department.employee.createMany() instead.
            "::createMany::Department::employee": {
              isArray: true,
              url: urlBase + "/Departments/:id/employee",
              method: "POST",
            },

            // INTERNAL. Use Department.employee.destroyAll() instead.
            "::delete::Department::employee": {
              url: urlBase + "/Departments/:id/employee",
              method: "DELETE",
            },

            // INTERNAL. Use Department.employee.count() instead.
            "::count::Department::employee": {
              url: urlBase + "/Departments/:id/employee/count",
              method: "GET",
            },

            // INTERNAL. Use SignIn.employee() instead.
            "::get::SignIn::employee": {
              url: urlBase + "/SignIns/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use Trip.employee() instead.
            "::get::Trip::employee": {
              url: urlBase + "/Trips/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use Appointment.employee() instead.
            "::get::Appointment::employee": {
              url: urlBase + "/Appointments/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.employee() instead.
            "::get::Dispatch::employee": {
              url: urlBase + "/Dispatches/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.findById() instead.
            "::findById::Dispatch::dispatchEmployees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/dispatchEmployees/:fk",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.destroyById() instead.
            "::destroyById::Dispatch::dispatchEmployees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/dispatchEmployees/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.updateById() instead.
            "::updateById::Dispatch::dispatchEmployees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/dispatchEmployees/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.link() instead.
            "::link::Dispatch::dispatchEmployees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/dispatchEmployees/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.unlink() instead.
            "::unlink::Dispatch::dispatchEmployees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/dispatchEmployees/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.exists() instead.
            "::exists::Dispatch::dispatchEmployees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/dispatchEmployees/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees() instead.
            "::get::Dispatch::dispatchEmployees": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/dispatchEmployees",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.create() instead.
            "::create::Dispatch::dispatchEmployees": {
              url: urlBase + "/Dispatches/:id/dispatchEmployees",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.createMany() instead.
            "::createMany::Dispatch::dispatchEmployees": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/dispatchEmployees",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.destroyAll() instead.
            "::delete::Dispatch::dispatchEmployees": {
              url: urlBase + "/Dispatches/:id/dispatchEmployees",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.count() instead.
            "::count::Dispatch::dispatchEmployees": {
              url: urlBase + "/Dispatches/:id/dispatchEmployees/count",
              method: "GET",
            },

            // INTERNAL. Use Maintain.engineer() instead.
            "::get::Maintain::engineer": {
              url: urlBase + "/Maintains/:id/engineer",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.employeeInCharge() instead.
            "::get::AccessoryApplication::employeeInCharge": {
              url: urlBase + "/AccessoryApplications/:id/employeeInCharge",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.applicant() instead.
            "::get::AccessoryApplication::applicant": {
              url: urlBase + "/AccessoryApplications/:id/applicant",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.feedbackEmployee() instead.
            "::get::AccessoryApplication::feedbackEmployee": {
              url: urlBase + "/AccessoryApplications/:id/feedbackEmployee",
              method: "GET",
            },

            // INTERNAL. Use DispatchEmployee.employee() instead.
            "::get::DispatchEmployee::employee": {
              url: urlBase + "/DispatchEmployees/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use DisposeRecord.disposeEmployee() instead.
            "::get::DisposeRecord::disposeEmployee": {
              url: urlBase + "/DisposeRecords/:id/disposeEmployee",
              method: "GET",
            },

            // INTERNAL. Use SummaryStatement.creater() instead.
            "::get::SummaryStatement::creater": {
              url: urlBase + "/SummaryStatements/:id/creater",
              method: "GET",
            },

            // INTERNAL. Use SummaryStatement.createManyr() instead.
            "::get::SummaryStatement::createManyr": {
              isArray: true,
              url: urlBase + "/SummaryStatements/:id/creater",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Employee#patchOrCreate
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Employee#updateOrCreate
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Employee#update
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Employee#destroyById
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Employee#removeById
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Employee#patchAttributes
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Employee#modelName
        * @propertyOf lbServices.Employee
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Employee`.
        */
        R.modelName = "Employee";

    /**
     * @ngdoc object
     * @name lbServices.Employee.createdBy
     * @header lbServices.Employee.createdBy
     * @object
     * @description
     *
     * The object `Employee.createdBy` groups methods
     * manipulating `User` instances related to `Employee`.
     *
     * Call {@link lbServices.Employee#createdBy Employee.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Employee#createManydBy
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Employee::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee#createdBy
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Employee::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee#lastUpdatedBy
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Employee::lastUpdatedBy"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Employee.user
     * @header lbServices.Employee.user
     * @object
     * @description
     *
     * The object `Employee.user` groups methods
     * manipulating `User` instances related to `Employee`.
     *
     * Call {@link lbServices.Employee#user Employee.user()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Employee#user
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Queries user of Employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Employee::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.user#count
             * @methodOf lbServices.Employee.user
             *
             * @description
             *
             * Counts user of Employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.user.count = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::count::Employee::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.user#create
             * @methodOf lbServices.Employee.user
             *
             * @description
             *
             * Creates a new instance in user of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user.create = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::create::Employee::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.user#createMany
             * @methodOf lbServices.Employee.user
             *
             * @description
             *
             * Creates a new instance in user of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user.createMany = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::createMany::Employee::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.user#destroyAll
             * @methodOf lbServices.Employee.user
             *
             * @description
             *
             * Deletes all user of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.user.destroyAll = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::delete::Employee::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.user#destroyById
             * @methodOf lbServices.Employee.user
             *
             * @description
             *
             * Delete a related item by id for user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for user
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.user.destroyById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::destroyById::Employee::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.user#findById
             * @methodOf lbServices.Employee.user
             *
             * @description
             *
             * Find a related item by id for user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for user
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user.findById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::findById::Employee::user"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.user#updateById
             * @methodOf lbServices.Employee.user
             *
             * @description
             *
             * Update a related item by id for user.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for user
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.user.updateById = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::updateById::Employee::user"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Employee.departments
     * @header lbServices.Employee.departments
     * @object
     * @description
     *
     * The object `Employee.departments` groups methods
     * manipulating `Department` instances related to `Employee`.
     *
     * Call {@link lbServices.Employee#departments Employee.departments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Employee#departments
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Queries departments of Employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.departments = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::get::Employee::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.departments#count
             * @methodOf lbServices.Employee.departments
             *
             * @description
             *
             * Counts departments of Employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.departments.count = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::count::Employee::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.departments#create
             * @methodOf lbServices.Employee.departments
             *
             * @description
             *
             * Creates a new instance in departments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.departments.create = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::create::Employee::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.departments#createMany
             * @methodOf lbServices.Employee.departments
             *
             * @description
             *
             * Creates a new instance in departments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.departments.createMany = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::createMany::Employee::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.departments#destroyAll
             * @methodOf lbServices.Employee.departments
             *
             * @description
             *
             * Deletes all departments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.departments.destroyAll = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::delete::Employee::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.departments#destroyById
             * @methodOf lbServices.Employee.departments
             *
             * @description
             *
             * Delete a related item by id for departments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for departments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.departments.destroyById = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::destroyById::Employee::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.departments#exists
             * @methodOf lbServices.Employee.departments
             *
             * @description
             *
             * Check the existence of departments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for departments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.departments.exists = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::exists::Employee::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.departments#findById
             * @methodOf lbServices.Employee.departments
             *
             * @description
             *
             * Find a related item by id for departments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for departments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.departments.findById = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::findById::Employee::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.departments#link
             * @methodOf lbServices.Employee.departments
             *
             * @description
             *
             * Add a related item by id for departments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for departments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.departments.link = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::link::Employee::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.departments#unlink
             * @methodOf lbServices.Employee.departments
             *
             * @description
             *
             * Remove the departments relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for departments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.departments.unlink = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::unlink::Employee::departments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.departments#updateById
             * @methodOf lbServices.Employee.departments
             *
             * @description
             *
             * Update a related item by id for departments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for departments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.departments.updateById = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::updateById::Employee::departments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Employee.appointments
     * @header lbServices.Employee.appointments
     * @object
     * @description
     *
     * The object `Employee.appointments` groups methods
     * manipulating `Appointment` instances related to `Employee`.
     *
     * Call {@link lbServices.Employee#appointments Employee.appointments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Employee#appointments
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Queries appointments of Employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
        R.appointments = function() {
          var TargetResource = $injector.get("Appointment");
          var action = TargetResource["::get::Employee::appointments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.appointments#count
             * @methodOf lbServices.Employee.appointments
             *
             * @description
             *
             * Counts appointments of Employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.appointments.count = function() {
          var TargetResource = $injector.get("Appointment");
          var action = TargetResource["::count::Employee::appointments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.appointments#create
             * @methodOf lbServices.Employee.appointments
             *
             * @description
             *
             * Creates a new instance in appointments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
        R.appointments.create = function() {
          var TargetResource = $injector.get("Appointment");
          var action = TargetResource["::create::Employee::appointments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.appointments#createMany
             * @methodOf lbServices.Employee.appointments
             *
             * @description
             *
             * Creates a new instance in appointments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
        R.appointments.createMany = function() {
          var TargetResource = $injector.get("Appointment");
          var action = TargetResource["::createMany::Employee::appointments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.appointments#destroyAll
             * @methodOf lbServices.Employee.appointments
             *
             * @description
             *
             * Deletes all appointments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.appointments.destroyAll = function() {
          var TargetResource = $injector.get("Appointment");
          var action = TargetResource["::delete::Employee::appointments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.appointments#destroyById
             * @methodOf lbServices.Employee.appointments
             *
             * @description
             *
             * Delete a related item by id for appointments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for appointments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.appointments.destroyById = function() {
          var TargetResource = $injector.get("Appointment");
          var action = TargetResource["::destroyById::Employee::appointments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.appointments#findById
             * @methodOf lbServices.Employee.appointments
             *
             * @description
             *
             * Find a related item by id for appointments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for appointments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
        R.appointments.findById = function() {
          var TargetResource = $injector.get("Appointment");
          var action = TargetResource["::findById::Employee::appointments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.appointments#updateById
             * @methodOf lbServices.Employee.appointments
             *
             * @description
             *
             * Update a related item by id for appointments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for appointments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
        R.appointments.updateById = function() {
          var TargetResource = $injector.get("Appointment");
          var action = TargetResource["::updateById::Employee::appointments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Employee.maintains
     * @header lbServices.Employee.maintains
     * @object
     * @description
     *
     * The object `Employee.maintains` groups methods
     * manipulating `Maintain` instances related to `Employee`.
     *
     * Call {@link lbServices.Employee#maintains Employee.maintains()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Employee#maintains
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Queries maintains of Employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R.maintains = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::get::Employee::maintains"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.maintains#count
             * @methodOf lbServices.Employee.maintains
             *
             * @description
             *
             * Counts maintains of Employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.maintains.count = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::count::Employee::maintains"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.maintains#create
             * @methodOf lbServices.Employee.maintains
             *
             * @description
             *
             * Creates a new instance in maintains of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R.maintains.create = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::create::Employee::maintains"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.maintains#createMany
             * @methodOf lbServices.Employee.maintains
             *
             * @description
             *
             * Creates a new instance in maintains of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R.maintains.createMany = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::createMany::Employee::maintains"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.maintains#destroyAll
             * @methodOf lbServices.Employee.maintains
             *
             * @description
             *
             * Deletes all maintains of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.maintains.destroyAll = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::delete::Employee::maintains"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.maintains#destroyById
             * @methodOf lbServices.Employee.maintains
             *
             * @description
             *
             * Delete a related item by id for maintains.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for maintains
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.maintains.destroyById = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::destroyById::Employee::maintains"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.maintains#findById
             * @methodOf lbServices.Employee.maintains
             *
             * @description
             *
             * Find a related item by id for maintains.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for maintains
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R.maintains.findById = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::findById::Employee::maintains"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.maintains#updateById
             * @methodOf lbServices.Employee.maintains
             *
             * @description
             *
             * Update a related item by id for maintains.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for maintains
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R.maintains.updateById = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::updateById::Employee::maintains"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Employee.accessoryApplications
     * @header lbServices.Employee.accessoryApplications
     * @object
     * @description
     *
     * The object `Employee.accessoryApplications` groups methods
     * manipulating `AccessoryApplication` instances related to `Employee`.
     *
     * Call {@link lbServices.Employee#accessoryApplications Employee.accessoryApplications()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Employee#accessoryApplications
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Queries accessoryApplications of Employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R.accessoryApplications = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::get::Employee::accessoryApplications"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.accessoryApplications#count
             * @methodOf lbServices.Employee.accessoryApplications
             *
             * @description
             *
             * Counts accessoryApplications of Employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.accessoryApplications.count = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::count::Employee::accessoryApplications"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.accessoryApplications#create
             * @methodOf lbServices.Employee.accessoryApplications
             *
             * @description
             *
             * Creates a new instance in accessoryApplications of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R.accessoryApplications.create = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::create::Employee::accessoryApplications"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.accessoryApplications#createMany
             * @methodOf lbServices.Employee.accessoryApplications
             *
             * @description
             *
             * Creates a new instance in accessoryApplications of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R.accessoryApplications.createMany = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::createMany::Employee::accessoryApplications"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.accessoryApplications#destroyAll
             * @methodOf lbServices.Employee.accessoryApplications
             *
             * @description
             *
             * Deletes all accessoryApplications of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accessoryApplications.destroyAll = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::delete::Employee::accessoryApplications"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.accessoryApplications#destroyById
             * @methodOf lbServices.Employee.accessoryApplications
             *
             * @description
             *
             * Delete a related item by id for accessoryApplications.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for accessoryApplications
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.accessoryApplications.destroyById = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::destroyById::Employee::accessoryApplications"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.accessoryApplications#findById
             * @methodOf lbServices.Employee.accessoryApplications
             *
             * @description
             *
             * Find a related item by id for accessoryApplications.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for accessoryApplications
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R.accessoryApplications.findById = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::findById::Employee::accessoryApplications"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.accessoryApplications#updateById
             * @methodOf lbServices.Employee.accessoryApplications
             *
             * @description
             *
             * Update a related item by id for accessoryApplications.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for accessoryApplications
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R.accessoryApplications.updateById = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::updateById::Employee::accessoryApplications"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Employee.employeeDispatches
     * @header lbServices.Employee.employeeDispatches
     * @object
     * @description
     *
     * The object `Employee.employeeDispatches` groups methods
     * manipulating `Dispatch` instances related to `Employee`.
     *
     * Call {@link lbServices.Employee#employeeDispatches Employee.employeeDispatches()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Employee#employeeDispatches
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Queries employeeDispatches of Employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.employeeDispatches = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::get::Employee::employeeDispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.employeeDispatches#count
             * @methodOf lbServices.Employee.employeeDispatches
             *
             * @description
             *
             * Counts employeeDispatches of Employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.employeeDispatches.count = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::count::Employee::employeeDispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.employeeDispatches#create
             * @methodOf lbServices.Employee.employeeDispatches
             *
             * @description
             *
             * Creates a new instance in employeeDispatches of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.employeeDispatches.create = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::create::Employee::employeeDispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.employeeDispatches#createMany
             * @methodOf lbServices.Employee.employeeDispatches
             *
             * @description
             *
             * Creates a new instance in employeeDispatches of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.employeeDispatches.createMany = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::createMany::Employee::employeeDispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.employeeDispatches#destroyAll
             * @methodOf lbServices.Employee.employeeDispatches
             *
             * @description
             *
             * Deletes all employeeDispatches of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.employeeDispatches.destroyAll = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::delete::Employee::employeeDispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.employeeDispatches#destroyById
             * @methodOf lbServices.Employee.employeeDispatches
             *
             * @description
             *
             * Delete a related item by id for employeeDispatches.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for employeeDispatches
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.employeeDispatches.destroyById = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::destroyById::Employee::employeeDispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.employeeDispatches#exists
             * @methodOf lbServices.Employee.employeeDispatches
             *
             * @description
             *
             * Check the existence of employeeDispatches relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for employeeDispatches
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.employeeDispatches.exists = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::exists::Employee::employeeDispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.employeeDispatches#findById
             * @methodOf lbServices.Employee.employeeDispatches
             *
             * @description
             *
             * Find a related item by id for employeeDispatches.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for employeeDispatches
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.employeeDispatches.findById = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::findById::Employee::employeeDispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.employeeDispatches#link
             * @methodOf lbServices.Employee.employeeDispatches
             *
             * @description
             *
             * Add a related item by id for employeeDispatches.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for employeeDispatches
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.employeeDispatches.link = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::link::Employee::employeeDispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.employeeDispatches#unlink
             * @methodOf lbServices.Employee.employeeDispatches
             *
             * @description
             *
             * Remove the employeeDispatches relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for employeeDispatches
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.employeeDispatches.unlink = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::unlink::Employee::employeeDispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.employeeDispatches#updateById
             * @methodOf lbServices.Employee.employeeDispatches
             *
             * @description
             *
             * Update a related item by id for employeeDispatches.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for employeeDispatches
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.employeeDispatches.updateById = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::updateById::Employee::employeeDispatches"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Employee.dispatches
     * @header lbServices.Employee.dispatches
     * @object
     * @description
     *
     * The object `Employee.dispatches` groups methods
     * manipulating `DispatchEmployee` instances related to `Employee`.
     *
     * Call {@link lbServices.Employee#dispatches Employee.dispatches()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Employee#dispatches
             * @methodOf lbServices.Employee
             *
             * @description
             *
             * Queries dispatches of Employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
        R.dispatches = function() {
          var TargetResource = $injector.get("DispatchEmployee");
          var action = TargetResource["::get::Employee::dispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.dispatches#count
             * @methodOf lbServices.Employee.dispatches
             *
             * @description
             *
             * Counts dispatches of Employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.dispatches.count = function() {
          var TargetResource = $injector.get("DispatchEmployee");
          var action = TargetResource["::count::Employee::dispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.dispatches#create
             * @methodOf lbServices.Employee.dispatches
             *
             * @description
             *
             * Creates a new instance in dispatches of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
        R.dispatches.create = function() {
          var TargetResource = $injector.get("DispatchEmployee");
          var action = TargetResource["::create::Employee::dispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.dispatches#createMany
             * @methodOf lbServices.Employee.dispatches
             *
             * @description
             *
             * Creates a new instance in dispatches of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
        R.dispatches.createMany = function() {
          var TargetResource = $injector.get("DispatchEmployee");
          var action = TargetResource["::createMany::Employee::dispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.dispatches#destroyAll
             * @methodOf lbServices.Employee.dispatches
             *
             * @description
             *
             * Deletes all dispatches of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.dispatches.destroyAll = function() {
          var TargetResource = $injector.get("DispatchEmployee");
          var action = TargetResource["::delete::Employee::dispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.dispatches#destroyById
             * @methodOf lbServices.Employee.dispatches
             *
             * @description
             *
             * Delete a related item by id for dispatches.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for dispatches
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.dispatches.destroyById = function() {
          var TargetResource = $injector.get("DispatchEmployee");
          var action = TargetResource["::destroyById::Employee::dispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.dispatches#findById
             * @methodOf lbServices.Employee.dispatches
             *
             * @description
             *
             * Find a related item by id for dispatches.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for dispatches
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
        R.dispatches.findById = function() {
          var TargetResource = $injector.get("DispatchEmployee");
          var action = TargetResource["::findById::Employee::dispatches"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Employee.dispatches#updateById
             * @methodOf lbServices.Employee.dispatches
             *
             * @description
             *
             * Update a related item by id for dispatches.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for dispatches
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
        R.dispatches.updateById = function() {
          var TargetResource = $injector.get("DispatchEmployee");
          var action = TargetResource["::updateById::Employee::dispatches"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Department
 * @header lbServices.Department
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Department` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Department",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Departments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Department.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/Departments/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Department.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/Departments/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Department.higherLevelDepartment() instead.
            "prototype$__get__higherLevelDepartment": {
              url: urlBase + "/Departments/:id/higherLevelDepartment",
              method: "GET",
            },

            // INTERNAL. Use Department.subDepartments.findById() instead.
            "prototype$__findById__subDepartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/subDepartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Department.subDepartments.destroyById() instead.
            "prototype$__destroyById__subDepartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/subDepartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Department.subDepartments.updateById() instead.
            "prototype$__updateById__subDepartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/subDepartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Department.employee.findById() instead.
            "prototype$__findById__employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employee/:fk",
              method: "GET",
            },

            // INTERNAL. Use Department.employee.destroyById() instead.
            "prototype$__destroyById__employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employee/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Department.employee.updateById() instead.
            "prototype$__updateById__employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employee/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Department.employee.link() instead.
            "prototype$__link__employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employee/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Department.employee.unlink() instead.
            "prototype$__unlink__employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employee/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Department.employee.exists() instead.
            "prototype$__exists__employee": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/employee/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Department.subDepartments() instead.
            "prototype$__get__subDepartments": {
              isArray: true,
              url: urlBase + "/Departments/:id/subDepartments",
              method: "GET",
            },

            // INTERNAL. Use Department.subDepartments.create() instead.
            "prototype$__create__subDepartments": {
              url: urlBase + "/Departments/:id/subDepartments",
              method: "POST",
            },

            // INTERNAL. Use Department.subDepartments.destroyAll() instead.
            "prototype$__delete__subDepartments": {
              url: urlBase + "/Departments/:id/subDepartments",
              method: "DELETE",
            },

            // INTERNAL. Use Department.subDepartments.count() instead.
            "prototype$__count__subDepartments": {
              url: urlBase + "/Departments/:id/subDepartments/count",
              method: "GET",
            },

            // INTERNAL. Use Department.employee() instead.
            "prototype$__get__employee": {
              isArray: true,
              url: urlBase + "/Departments/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use Department.employee.create() instead.
            "prototype$__create__employee": {
              url: urlBase + "/Departments/:id/employee",
              method: "POST",
            },

            // INTERNAL. Use Department.employee.destroyAll() instead.
            "prototype$__delete__employee": {
              url: urlBase + "/Departments/:id/employee",
              method: "DELETE",
            },

            // INTERNAL. Use Department.employee.count() instead.
            "prototype$__count__employee": {
              url: urlBase + "/Departments/:id/employee/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#create
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Departments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#createMany
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Departments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#upsert
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Departments",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#replaceOrCreate
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Departments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#exists
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Departments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#findById
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Departments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#replaceById
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Departments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#find
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Departments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#findOne
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Departments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#updateAll
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Departments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#deleteById
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Departments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#count
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Departments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#prototype$updateAttributes
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Departments/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Department#createChangeStream
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Departments/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Employee.departments.findById() instead.
            "::findById::Employee::departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/departments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Employee.departments.destroyById() instead.
            "::destroyById::Employee::departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/departments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.departments.updateById() instead.
            "::updateById::Employee::departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/departments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.departments.link() instead.
            "::link::Employee::departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/departments/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.departments.unlink() instead.
            "::unlink::Employee::departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/departments/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.departments.exists() instead.
            "::exists::Employee::departments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/departments/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Employee.departments() instead.
            "::get::Employee::departments": {
              isArray: true,
              url: urlBase + "/Employees/:id/departments",
              method: "GET",
            },

            // INTERNAL. Use Employee.departments.create() instead.
            "::create::Employee::departments": {
              url: urlBase + "/Employees/:id/departments",
              method: "POST",
            },

            // INTERNAL. Use Employee.departments.createMany() instead.
            "::createMany::Employee::departments": {
              isArray: true,
              url: urlBase + "/Employees/:id/departments",
              method: "POST",
            },

            // INTERNAL. Use Employee.departments.destroyAll() instead.
            "::delete::Employee::departments": {
              url: urlBase + "/Employees/:id/departments",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.departments.count() instead.
            "::count::Employee::departments": {
              url: urlBase + "/Employees/:id/departments/count",
              method: "GET",
            },

            // INTERNAL. Use Department.higherLevelDepartment() instead.
            "::get::Department::higherLevelDepartment": {
              url: urlBase + "/Departments/:id/higherLevelDepartment",
              method: "GET",
            },

            // INTERNAL. Use Department.subDepartments.findById() instead.
            "::findById::Department::subDepartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/subDepartments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Department.subDepartments.destroyById() instead.
            "::destroyById::Department::subDepartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/subDepartments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Department.subDepartments.updateById() instead.
            "::updateById::Department::subDepartments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Departments/:id/subDepartments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Department.subDepartments() instead.
            "::get::Department::subDepartments": {
              isArray: true,
              url: urlBase + "/Departments/:id/subDepartments",
              method: "GET",
            },

            // INTERNAL. Use Department.subDepartments.create() instead.
            "::create::Department::subDepartments": {
              url: urlBase + "/Departments/:id/subDepartments",
              method: "POST",
            },

            // INTERNAL. Use Department.subDepartments.createMany() instead.
            "::createMany::Department::subDepartments": {
              isArray: true,
              url: urlBase + "/Departments/:id/subDepartments",
              method: "POST",
            },

            // INTERNAL. Use Department.subDepartments.destroyAll() instead.
            "::delete::Department::subDepartments": {
              url: urlBase + "/Departments/:id/subDepartments",
              method: "DELETE",
            },

            // INTERNAL. Use Department.subDepartments.count() instead.
            "::count::Department::subDepartments": {
              url: urlBase + "/Departments/:id/subDepartments/count",
              method: "GET",
            },

            // INTERNAL. Use Appointment.department() instead.
            "::get::Appointment::department": {
              url: urlBase + "/Appointments/:id/department",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Department#patchOrCreate
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Department#updateOrCreate
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Department#update
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Department#destroyById
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Department#removeById
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Department#patchAttributes
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Department#modelName
        * @propertyOf lbServices.Department
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Department`.
        */
        R.modelName = "Department";

    /**
     * @ngdoc object
     * @name lbServices.Department.createdBy
     * @header lbServices.Department.createdBy
     * @object
     * @description
     *
     * The object `Department.createdBy` groups methods
     * manipulating `User` instances related to `Department`.
     *
     * Call {@link lbServices.Department#createdBy Department.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Department#createManydBy
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Department::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department#createdBy
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Department::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department#lastUpdatedBy
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Department::lastUpdatedBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department#higherLevelDepartment
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Fetches belongsTo relation higherLevelDepartment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.higherLevelDepartment = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::get::Department::higherLevelDepartment"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Department.subDepartments
     * @header lbServices.Department.subDepartments
     * @object
     * @description
     *
     * The object `Department.subDepartments` groups methods
     * manipulating `Department` instances related to `Department`.
     *
     * Call {@link lbServices.Department#subDepartments Department.subDepartments()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Department#subDepartments
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Queries subDepartments of Department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.subDepartments = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::get::Department::subDepartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.subDepartments#count
             * @methodOf lbServices.Department.subDepartments
             *
             * @description
             *
             * Counts subDepartments of Department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.subDepartments.count = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::count::Department::subDepartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.subDepartments#create
             * @methodOf lbServices.Department.subDepartments
             *
             * @description
             *
             * Creates a new instance in subDepartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.subDepartments.create = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::create::Department::subDepartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.subDepartments#createMany
             * @methodOf lbServices.Department.subDepartments
             *
             * @description
             *
             * Creates a new instance in subDepartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.subDepartments.createMany = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::createMany::Department::subDepartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.subDepartments#destroyAll
             * @methodOf lbServices.Department.subDepartments
             *
             * @description
             *
             * Deletes all subDepartments of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.subDepartments.destroyAll = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::delete::Department::subDepartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.subDepartments#destroyById
             * @methodOf lbServices.Department.subDepartments
             *
             * @description
             *
             * Delete a related item by id for subDepartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for subDepartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.subDepartments.destroyById = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::destroyById::Department::subDepartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.subDepartments#findById
             * @methodOf lbServices.Department.subDepartments
             *
             * @description
             *
             * Find a related item by id for subDepartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for subDepartments
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.subDepartments.findById = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::findById::Department::subDepartments"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.subDepartments#updateById
             * @methodOf lbServices.Department.subDepartments
             *
             * @description
             *
             * Update a related item by id for subDepartments.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for subDepartments
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.subDepartments.updateById = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::updateById::Department::subDepartments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Department.employee
     * @header lbServices.Department.employee
     * @object
     * @description
     *
     * The object `Department.employee` groups methods
     * manipulating `Employee` instances related to `Department`.
     *
     * Call {@link lbServices.Department#employee Department.employee()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Department#employee
             * @methodOf lbServices.Department
             *
             * @description
             *
             * Queries employee of Department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::Department::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employee#count
             * @methodOf lbServices.Department.employee
             *
             * @description
             *
             * Counts employee of Department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.employee.count = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::count::Department::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employee#create
             * @methodOf lbServices.Department.employee
             *
             * @description
             *
             * Creates a new instance in employee of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee.create = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::create::Department::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employee#createMany
             * @methodOf lbServices.Department.employee
             *
             * @description
             *
             * Creates a new instance in employee of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee.createMany = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::createMany::Department::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employee#destroyAll
             * @methodOf lbServices.Department.employee
             *
             * @description
             *
             * Deletes all employee of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.employee.destroyAll = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::delete::Department::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employee#destroyById
             * @methodOf lbServices.Department.employee
             *
             * @description
             *
             * Delete a related item by id for employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for employee
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.employee.destroyById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::destroyById::Department::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employee#exists
             * @methodOf lbServices.Department.employee
             *
             * @description
             *
             * Check the existence of employee relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for employee
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee.exists = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::exists::Department::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employee#findById
             * @methodOf lbServices.Department.employee
             *
             * @description
             *
             * Find a related item by id for employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for employee
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee.findById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::findById::Department::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employee#link
             * @methodOf lbServices.Department.employee
             *
             * @description
             *
             * Add a related item by id for employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for employee
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee.link = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::link::Department::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employee#unlink
             * @methodOf lbServices.Department.employee
             *
             * @description
             *
             * Remove the employee relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for employee
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.employee.unlink = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::unlink::Department::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Department.employee#updateById
             * @methodOf lbServices.Department.employee
             *
             * @description
             *
             * Update a related item by id for employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for employee
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee.updateById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::updateById::Department::employee"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Region
 * @header lbServices.Region
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Region` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Region",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Regions/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Region.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/Regions/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Region.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/Regions/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Region.provinces.findById() instead.
            "prototype$__findById__provinces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Regions/:id/provinces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Region.provinces.destroyById() instead.
            "prototype$__destroyById__provinces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Regions/:id/provinces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Region.provinces.updateById() instead.
            "prototype$__updateById__provinces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Regions/:id/provinces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Region.provinces() instead.
            "prototype$__get__provinces": {
              isArray: true,
              url: urlBase + "/Regions/:id/provinces",
              method: "GET",
            },

            // INTERNAL. Use Region.provinces.create() instead.
            "prototype$__create__provinces": {
              url: urlBase + "/Regions/:id/provinces",
              method: "POST",
            },

            // INTERNAL. Use Region.provinces.destroyAll() instead.
            "prototype$__delete__provinces": {
              url: urlBase + "/Regions/:id/provinces",
              method: "DELETE",
            },

            // INTERNAL. Use Region.provinces.count() instead.
            "prototype$__count__provinces": {
              url: urlBase + "/Regions/:id/provinces/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Region#create
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Regions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Region#createMany
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Regions",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Region#upsert
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Regions",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Region#replaceOrCreate
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Regions/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Region#exists
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Regions/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Region#findById
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Regions/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Region#replaceById
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Regions/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Region#find
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Regions",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Region#findOne
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Regions/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Region#updateAll
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Regions/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Region#deleteById
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Regions/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Region#count
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Regions/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Region#prototype$updateAttributes
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Regions/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Region#createChangeStream
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Regions/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Province.region() instead.
            "::get::Province::region": {
              url: urlBase + "/Provinces/:id/region",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Region#patchOrCreate
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Region#updateOrCreate
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Region#update
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Region#destroyById
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Region#removeById
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Region#patchAttributes
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Region#modelName
        * @propertyOf lbServices.Region
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Region`.
        */
        R.modelName = "Region";

    /**
     * @ngdoc object
     * @name lbServices.Region.createdBy
     * @header lbServices.Region.createdBy
     * @object
     * @description
     *
     * The object `Region.createdBy` groups methods
     * manipulating `User` instances related to `Region`.
     *
     * Call {@link lbServices.Region#createdBy Region.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Region#createManydBy
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Region::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Region#createdBy
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Region::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Region#lastUpdatedBy
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Region::lastUpdatedBy"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Region.provinces
     * @header lbServices.Region.provinces
     * @object
     * @description
     *
     * The object `Region.provinces` groups methods
     * manipulating `Province` instances related to `Region`.
     *
     * Call {@link lbServices.Region#provinces Region.provinces()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Region#provinces
             * @methodOf lbServices.Region
             *
             * @description
             *
             * Queries provinces of Region.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R.provinces = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::get::Region::provinces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Region.provinces#count
             * @methodOf lbServices.Region.provinces
             *
             * @description
             *
             * Counts provinces of Region.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.provinces.count = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::count::Region::provinces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Region.provinces#create
             * @methodOf lbServices.Region.provinces
             *
             * @description
             *
             * Creates a new instance in provinces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R.provinces.create = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::create::Region::provinces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Region.provinces#createMany
             * @methodOf lbServices.Region.provinces
             *
             * @description
             *
             * Creates a new instance in provinces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R.provinces.createMany = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::createMany::Region::provinces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Region.provinces#destroyAll
             * @methodOf lbServices.Region.provinces
             *
             * @description
             *
             * Deletes all provinces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.provinces.destroyAll = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::delete::Region::provinces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Region.provinces#destroyById
             * @methodOf lbServices.Region.provinces
             *
             * @description
             *
             * Delete a related item by id for provinces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for provinces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.provinces.destroyById = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::destroyById::Region::provinces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Region.provinces#findById
             * @methodOf lbServices.Region.provinces
             *
             * @description
             *
             * Find a related item by id for provinces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for provinces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R.provinces.findById = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::findById::Region::provinces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Region.provinces#updateById
             * @methodOf lbServices.Region.provinces
             *
             * @description
             *
             * Update a related item by id for provinces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for provinces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R.provinces.updateById = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::updateById::Region::provinces"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Country
 * @header lbServices.Country
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Country` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Country",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Countries/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Country.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/Countries/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Country.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/Countries/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Country.provinces.findById() instead.
            "prototype$__findById__provinces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Countries/:id/provinces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Country.provinces.destroyById() instead.
            "prototype$__destroyById__provinces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Countries/:id/provinces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Country.provinces.updateById() instead.
            "prototype$__updateById__provinces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Countries/:id/provinces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Country.provinces() instead.
            "prototype$__get__provinces": {
              isArray: true,
              url: urlBase + "/Countries/:id/provinces",
              method: "GET",
            },

            // INTERNAL. Use Country.provinces.create() instead.
            "prototype$__create__provinces": {
              url: urlBase + "/Countries/:id/provinces",
              method: "POST",
            },

            // INTERNAL. Use Country.provinces.destroyAll() instead.
            "prototype$__delete__provinces": {
              url: urlBase + "/Countries/:id/provinces",
              method: "DELETE",
            },

            // INTERNAL. Use Country.provinces.count() instead.
            "prototype$__count__provinces": {
              url: urlBase + "/Countries/:id/provinces/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Country#create
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Countries",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Country#createMany
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Countries",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Country#upsert
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Countries",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Country#replaceOrCreate
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Countries/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Country#exists
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Countries/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Country#findById
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Countries/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Country#replaceById
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Countries/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Country#find
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Countries",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Country#findOne
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Countries/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Country#updateAll
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Countries/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Country#deleteById
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Countries/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Country#count
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Countries/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Country#prototype$updateAttributes
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Countries/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Country#createChangeStream
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Countries/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Province.country() instead.
            "::get::Province::country": {
              url: urlBase + "/Provinces/:id/country",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Country#patchOrCreate
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Country#updateOrCreate
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Country#update
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Country#destroyById
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Country#removeById
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Country#patchAttributes
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Country#modelName
        * @propertyOf lbServices.Country
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Country`.
        */
        R.modelName = "Country";

    /**
     * @ngdoc object
     * @name lbServices.Country.createdBy
     * @header lbServices.Country.createdBy
     * @object
     * @description
     *
     * The object `Country.createdBy` groups methods
     * manipulating `User` instances related to `Country`.
     *
     * Call {@link lbServices.Country#createdBy Country.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Country#createManydBy
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Country::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Country#createdBy
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Country::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Country#lastUpdatedBy
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Country::lastUpdatedBy"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Country.provinces
     * @header lbServices.Country.provinces
     * @object
     * @description
     *
     * The object `Country.provinces` groups methods
     * manipulating `Province` instances related to `Country`.
     *
     * Call {@link lbServices.Country#provinces Country.provinces()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Country#provinces
             * @methodOf lbServices.Country
             *
             * @description
             *
             * Queries provinces of Country.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R.provinces = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::get::Country::provinces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Country.provinces#count
             * @methodOf lbServices.Country.provinces
             *
             * @description
             *
             * Counts provinces of Country.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.provinces.count = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::count::Country::provinces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Country.provinces#create
             * @methodOf lbServices.Country.provinces
             *
             * @description
             *
             * Creates a new instance in provinces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R.provinces.create = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::create::Country::provinces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Country.provinces#createMany
             * @methodOf lbServices.Country.provinces
             *
             * @description
             *
             * Creates a new instance in provinces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R.provinces.createMany = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::createMany::Country::provinces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Country.provinces#destroyAll
             * @methodOf lbServices.Country.provinces
             *
             * @description
             *
             * Deletes all provinces of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.provinces.destroyAll = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::delete::Country::provinces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Country.provinces#destroyById
             * @methodOf lbServices.Country.provinces
             *
             * @description
             *
             * Delete a related item by id for provinces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for provinces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.provinces.destroyById = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::destroyById::Country::provinces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Country.provinces#findById
             * @methodOf lbServices.Country.provinces
             *
             * @description
             *
             * Find a related item by id for provinces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for provinces
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R.provinces.findById = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::findById::Country::provinces"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Country.provinces#updateById
             * @methodOf lbServices.Country.provinces
             *
             * @description
             *
             * Update a related item by id for provinces.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for provinces
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R.provinces.updateById = function() {
          var TargetResource = $injector.get("Province");
          var action = TargetResource["::updateById::Country::provinces"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Province
 * @header lbServices.Province
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Province` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Province",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Provinces/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Province.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/Provinces/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Province.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/Provinces/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Province.country() instead.
            "prototype$__get__country": {
              url: urlBase + "/Provinces/:id/country",
              method: "GET",
            },

            // INTERNAL. Use Province.region() instead.
            "prototype$__get__region": {
              url: urlBase + "/Provinces/:id/region",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Province#create
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Provinces",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Province#createMany
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Provinces",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Province#upsert
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Provinces",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Province#replaceOrCreate
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Provinces/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Province#exists
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Provinces/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Province#findById
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Provinces/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Province#replaceById
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Provinces/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Province#find
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Provinces",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Province#findOne
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Provinces/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Province#updateAll
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Provinces/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Province#deleteById
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Provinces/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Province#count
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Provinces/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Province#prototype$updateAttributes
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Provinces/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Province#createChangeStream
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Provinces/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Region.provinces.findById() instead.
            "::findById::Region::provinces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Regions/:id/provinces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Region.provinces.destroyById() instead.
            "::destroyById::Region::provinces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Regions/:id/provinces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Region.provinces.updateById() instead.
            "::updateById::Region::provinces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Regions/:id/provinces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Region.provinces() instead.
            "::get::Region::provinces": {
              isArray: true,
              url: urlBase + "/Regions/:id/provinces",
              method: "GET",
            },

            // INTERNAL. Use Region.provinces.create() instead.
            "::create::Region::provinces": {
              url: urlBase + "/Regions/:id/provinces",
              method: "POST",
            },

            // INTERNAL. Use Region.provinces.createMany() instead.
            "::createMany::Region::provinces": {
              isArray: true,
              url: urlBase + "/Regions/:id/provinces",
              method: "POST",
            },

            // INTERNAL. Use Region.provinces.destroyAll() instead.
            "::delete::Region::provinces": {
              url: urlBase + "/Regions/:id/provinces",
              method: "DELETE",
            },

            // INTERNAL. Use Region.provinces.count() instead.
            "::count::Region::provinces": {
              url: urlBase + "/Regions/:id/provinces/count",
              method: "GET",
            },

            // INTERNAL. Use Country.provinces.findById() instead.
            "::findById::Country::provinces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Countries/:id/provinces/:fk",
              method: "GET",
            },

            // INTERNAL. Use Country.provinces.destroyById() instead.
            "::destroyById::Country::provinces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Countries/:id/provinces/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Country.provinces.updateById() instead.
            "::updateById::Country::provinces": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Countries/:id/provinces/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Country.provinces() instead.
            "::get::Country::provinces": {
              isArray: true,
              url: urlBase + "/Countries/:id/provinces",
              method: "GET",
            },

            // INTERNAL. Use Country.provinces.create() instead.
            "::create::Country::provinces": {
              url: urlBase + "/Countries/:id/provinces",
              method: "POST",
            },

            // INTERNAL. Use Country.provinces.createMany() instead.
            "::createMany::Country::provinces": {
              isArray: true,
              url: urlBase + "/Countries/:id/provinces",
              method: "POST",
            },

            // INTERNAL. Use Country.provinces.destroyAll() instead.
            "::delete::Country::provinces": {
              url: urlBase + "/Countries/:id/provinces",
              method: "DELETE",
            },

            // INTERNAL. Use Country.provinces.count() instead.
            "::count::Country::provinces": {
              url: urlBase + "/Countries/:id/provinces/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Province#patchOrCreate
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Province#updateOrCreate
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Province#update
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Province#destroyById
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Province#removeById
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Province#patchAttributes
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Province` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Province#modelName
        * @propertyOf lbServices.Province
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Province`.
        */
        R.modelName = "Province";

    /**
     * @ngdoc object
     * @name lbServices.Province.createdBy
     * @header lbServices.Province.createdBy
     * @object
     * @description
     *
     * The object `Province.createdBy` groups methods
     * manipulating `User` instances related to `Province`.
     *
     * Call {@link lbServices.Province#createdBy Province.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Province#createManydBy
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Province::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Province#createdBy
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Province::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Province#lastUpdatedBy
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Province::lastUpdatedBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Province#country
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Fetches belongsTo relation country.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Country` object.)
             * </em>
             */
        R.country = function() {
          var TargetResource = $injector.get("Country");
          var action = TargetResource["::get::Province::country"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Province#region
             * @methodOf lbServices.Province
             *
             * @description
             *
             * Fetches belongsTo relation region.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Region` object.)
             * </em>
             */
        R.region = function() {
          var TargetResource = $injector.get("Region");
          var action = TargetResource["::get::Province::region"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ExposureCount
 * @header lbServices.ExposureCount
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ExposureCount` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ExposureCount",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ExposureCounts/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ExposureCount.equipment() instead.
            "prototype$__get__equipment": {
              url: urlBase + "/ExposureCounts/:id/equipment",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#create
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ExposureCounts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#createMany
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ExposureCounts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#upsert
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ExposureCounts",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#replaceOrCreate
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ExposureCounts/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#exists
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ExposureCounts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#findById
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ExposureCounts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#replaceById
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ExposureCounts/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#find
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ExposureCounts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#findOne
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ExposureCounts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#updateAll
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ExposureCounts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#deleteById
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ExposureCounts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#count
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ExposureCounts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#prototype$updateAttributes
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ExposureCounts/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#createChangeStream
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ExposureCounts/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Equipment.exposureCounts.findById() instead.
            "::findById::Equipment::exposureCounts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/exposureCounts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Equipment.exposureCounts.destroyById() instead.
            "::destroyById::Equipment::exposureCounts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/exposureCounts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.exposureCounts.updateById() instead.
            "::updateById::Equipment::exposureCounts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/exposureCounts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Equipment.exposureCounts() instead.
            "::get::Equipment::exposureCounts": {
              isArray: true,
              url: urlBase + "/Equipment/:id/exposureCounts",
              method: "GET",
            },

            // INTERNAL. Use Equipment.exposureCounts.create() instead.
            "::create::Equipment::exposureCounts": {
              url: urlBase + "/Equipment/:id/exposureCounts",
              method: "POST",
            },

            // INTERNAL. Use Equipment.exposureCounts.createMany() instead.
            "::createMany::Equipment::exposureCounts": {
              isArray: true,
              url: urlBase + "/Equipment/:id/exposureCounts",
              method: "POST",
            },

            // INTERNAL. Use Equipment.exposureCounts.destroyAll() instead.
            "::delete::Equipment::exposureCounts": {
              url: urlBase + "/Equipment/:id/exposureCounts",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.exposureCounts.count() instead.
            "::count::Equipment::exposureCounts": {
              url: urlBase + "/Equipment/:id/exposureCounts/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#patchOrCreate
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#updateOrCreate
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#update
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#destroyById
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#removeById
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#patchAttributes
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureCount` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ExposureCount#modelName
        * @propertyOf lbServices.ExposureCount
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ExposureCount`.
        */
        R.modelName = "ExposureCount";


            /**
             * @ngdoc method
             * @name lbServices.ExposureCount#equipment
             * @methodOf lbServices.ExposureCount
             *
             * @description
             *
             * Fetches belongsTo relation equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R.equipment = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::get::ExposureCount::equipment"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.LocationReport
 * @header lbServices.LocationReport
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LocationReport` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "LocationReport",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/LocationReports/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#create
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/LocationReports",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#createMany
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/LocationReports",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#upsert
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/LocationReports",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#replaceOrCreate
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/LocationReports/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#exists
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/LocationReports/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#findById
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/LocationReports/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#replaceById
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/LocationReports/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#find
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/LocationReports",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#findOne
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/LocationReports/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#updateAll
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/LocationReports/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#deleteById
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/LocationReports/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#count
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/LocationReports/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#prototype$updateAttributes
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/LocationReports/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#createChangeStream
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/LocationReports/change-stream",
              method: "POST",
            },

            // INTERNAL. Use SignIn.locationReport() instead.
            "::get::SignIn::locationReport": {
              url: urlBase + "/SignIns/:id/locationReport",
              method: "GET",
            },

            // INTERNAL. Use SignIn.locationReport.create() instead.
            "::create::SignIn::locationReport": {
              url: urlBase + "/SignIns/:id/locationReport",
              method: "POST",
            },

            // INTERNAL. Use SignIn.locationReport.createMany() instead.
            "::createMany::SignIn::locationReport": {
              isArray: true,
              url: urlBase + "/SignIns/:id/locationReport",
              method: "POST",
            },

            // INTERNAL. Use SignIn.locationReport.update() instead.
            "::update::SignIn::locationReport": {
              url: urlBase + "/SignIns/:id/locationReport",
              method: "PUT",
            },

            // INTERNAL. Use SignIn.locationReport.destroy() instead.
            "::destroy::SignIn::locationReport": {
              url: urlBase + "/SignIns/:id/locationReport",
              method: "DELETE",
            },

            // INTERNAL. Use Trip.locationReports.findById() instead.
            "::findById::Trip::locationReports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Trips/:id/locationReports/:fk",
              method: "GET",
            },

            // INTERNAL. Use Trip.locationReports.destroyById() instead.
            "::destroyById::Trip::locationReports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Trips/:id/locationReports/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Trip.locationReports.updateById() instead.
            "::updateById::Trip::locationReports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Trips/:id/locationReports/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Trip.locationReports() instead.
            "::get::Trip::locationReports": {
              isArray: true,
              url: urlBase + "/Trips/:id/locationReports",
              method: "GET",
            },

            // INTERNAL. Use Trip.locationReports.create() instead.
            "::create::Trip::locationReports": {
              url: urlBase + "/Trips/:id/locationReports",
              method: "POST",
            },

            // INTERNAL. Use Trip.locationReports.createMany() instead.
            "::createMany::Trip::locationReports": {
              isArray: true,
              url: urlBase + "/Trips/:id/locationReports",
              method: "POST",
            },

            // INTERNAL. Use Trip.locationReports.destroyAll() instead.
            "::delete::Trip::locationReports": {
              url: urlBase + "/Trips/:id/locationReports",
              method: "DELETE",
            },

            // INTERNAL. Use Trip.locationReports.count() instead.
            "::count::Trip::locationReports": {
              url: urlBase + "/Trips/:id/locationReports/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.LocationReport#patchOrCreate
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#updateOrCreate
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#update
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#destroyById
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#removeById
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LocationReport#patchAttributes
             * @methodOf lbServices.LocationReport
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.LocationReport#modelName
        * @propertyOf lbServices.LocationReport
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LocationReport`.
        */
        R.modelName = "LocationReport";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SignIn
 * @header lbServices.SignIn
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SignIn` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SignIn",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SignIns/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SignIn.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/SignIns/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use SignIn.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/SignIns/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use SignIn.employee() instead.
            "prototype$__get__employee": {
              url: urlBase + "/SignIns/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use SignIn.equipment() instead.
            "prototype$__get__equipment": {
              url: urlBase + "/SignIns/:id/equipment",
              method: "GET",
            },

            // INTERNAL. Use SignIn.locationReport() instead.
            "prototype$__get__locationReport": {
              url: urlBase + "/SignIns/:id/locationReport",
              method: "GET",
            },

            // INTERNAL. Use SignIn.locationReport.create() instead.
            "prototype$__create__locationReport": {
              url: urlBase + "/SignIns/:id/locationReport",
              method: "POST",
            },

            // INTERNAL. Use SignIn.locationReport.update() instead.
            "prototype$__update__locationReport": {
              url: urlBase + "/SignIns/:id/locationReport",
              method: "PUT",
            },

            // INTERNAL. Use SignIn.locationReport.destroy() instead.
            "prototype$__destroy__locationReport": {
              url: urlBase + "/SignIns/:id/locationReport",
              method: "DELETE",
            },

            // INTERNAL. Use SignIn.dispatch() instead.
            "prototype$__get__dispatch": {
              url: urlBase + "/SignIns/:id/dispatch",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SignIn#create
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SignIns",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SignIn#createMany
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SignIns",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SignIn#upsert
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SignIns",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.SignIn#replaceOrCreate
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/SignIns/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SignIn#exists
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SignIns/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SignIn#findById
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SignIns/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SignIn#replaceById
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/SignIns/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SignIn#find
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SignIns",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SignIn#findOne
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SignIns/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SignIn#updateAll
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SignIns/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SignIn#deleteById
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SignIns/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SignIn#count
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SignIns/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SignIn#prototype$updateAttributes
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SignIns/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.SignIn#createChangeStream
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SignIns/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.signIns.findById() instead.
            "::findById::Dispatch::signIns": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/signIns/:fk",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.signIns.destroyById() instead.
            "::destroyById::Dispatch::signIns": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/signIns/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.signIns.updateById() instead.
            "::updateById::Dispatch::signIns": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/signIns/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Dispatch.signIns() instead.
            "::get::Dispatch::signIns": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/signIns",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.signIns.create() instead.
            "::create::Dispatch::signIns": {
              url: urlBase + "/Dispatches/:id/signIns",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.signIns.createMany() instead.
            "::createMany::Dispatch::signIns": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/signIns",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.signIns.destroyAll() instead.
            "::delete::Dispatch::signIns": {
              url: urlBase + "/Dispatches/:id/signIns",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.signIns.count() instead.
            "::count::Dispatch::signIns": {
              url: urlBase + "/Dispatches/:id/signIns/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SignIn#patchOrCreate
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SignIn#updateOrCreate
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SignIn#update
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SignIn#destroyById
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SignIn#removeById
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SignIn#patchAttributes
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.SignIn#modelName
        * @propertyOf lbServices.SignIn
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SignIn`.
        */
        R.modelName = "SignIn";

    /**
     * @ngdoc object
     * @name lbServices.SignIn.createdBy
     * @header lbServices.SignIn.createdBy
     * @object
     * @description
     *
     * The object `SignIn.createdBy` groups methods
     * manipulating `User` instances related to `SignIn`.
     *
     * Call {@link lbServices.SignIn#createdBy SignIn.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SignIn#createManydBy
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::SignIn::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SignIn#createdBy
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::SignIn::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SignIn#lastUpdatedBy
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::SignIn::lastUpdatedBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SignIn#employee
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Fetches belongsTo relation employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::SignIn::employee"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SignIn#equipment
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Fetches belongsTo relation equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R.equipment = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::get::SignIn::equipment"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SignIn.locationReport
     * @header lbServices.SignIn.locationReport
     * @object
     * @description
     *
     * The object `SignIn.locationReport` groups methods
     * manipulating `LocationReport` instances related to `SignIn`.
     *
     * Call {@link lbServices.SignIn#locationReport SignIn.locationReport()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SignIn#locationReport
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Fetches hasOne relation locationReport.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
        R.locationReport = function() {
          var TargetResource = $injector.get("LocationReport");
          var action = TargetResource["::get::SignIn::locationReport"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SignIn.locationReport#create
             * @methodOf lbServices.SignIn.locationReport
             *
             * @description
             *
             * Creates a new instance in locationReport of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
        R.locationReport.create = function() {
          var TargetResource = $injector.get("LocationReport");
          var action = TargetResource["::create::SignIn::locationReport"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SignIn.locationReport#createMany
             * @methodOf lbServices.SignIn.locationReport
             *
             * @description
             *
             * Creates a new instance in locationReport of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
        R.locationReport.createMany = function() {
          var TargetResource = $injector.get("LocationReport");
          var action = TargetResource["::createMany::SignIn::locationReport"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SignIn.locationReport#destroy
             * @methodOf lbServices.SignIn.locationReport
             *
             * @description
             *
             * Deletes locationReport of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.locationReport.destroy = function() {
          var TargetResource = $injector.get("LocationReport");
          var action = TargetResource["::destroy::SignIn::locationReport"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SignIn.locationReport#update
             * @methodOf lbServices.SignIn.locationReport
             *
             * @description
             *
             * Update locationReport of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
        R.locationReport.update = function() {
          var TargetResource = $injector.get("LocationReport");
          var action = TargetResource["::update::SignIn::locationReport"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SignIn#dispatch
             * @methodOf lbServices.SignIn
             *
             * @description
             *
             * Fetches belongsTo relation dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.dispatch = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::get::SignIn::dispatch"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Trip
 * @header lbServices.Trip
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Trip` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Trip",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Trips/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Trip.employee() instead.
            "prototype$__get__employee": {
              url: urlBase + "/Trips/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use Trip.locationReports.findById() instead.
            "prototype$__findById__locationReports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Trips/:id/locationReports/:fk",
              method: "GET",
            },

            // INTERNAL. Use Trip.locationReports.destroyById() instead.
            "prototype$__destroyById__locationReports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Trips/:id/locationReports/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Trip.locationReports.updateById() instead.
            "prototype$__updateById__locationReports": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Trips/:id/locationReports/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Trip.dispatch() instead.
            "prototype$__get__dispatch": {
              url: urlBase + "/Trips/:id/dispatch",
              method: "GET",
            },

            // INTERNAL. Use Trip.locationReports() instead.
            "prototype$__get__locationReports": {
              isArray: true,
              url: urlBase + "/Trips/:id/locationReports",
              method: "GET",
            },

            // INTERNAL. Use Trip.locationReports.create() instead.
            "prototype$__create__locationReports": {
              url: urlBase + "/Trips/:id/locationReports",
              method: "POST",
            },

            // INTERNAL. Use Trip.locationReports.destroyAll() instead.
            "prototype$__delete__locationReports": {
              url: urlBase + "/Trips/:id/locationReports",
              method: "DELETE",
            },

            // INTERNAL. Use Trip.locationReports.count() instead.
            "prototype$__count__locationReports": {
              url: urlBase + "/Trips/:id/locationReports/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Trip#create
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Trips",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Trip#createMany
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Trips",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Trip#upsert
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Trips",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Trip#replaceOrCreate
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Trips/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Trip#exists
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Trips/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Trip#findById
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Trips/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Trip#replaceById
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Trips/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Trip#find
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Trips",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Trip#findOne
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Trips/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Trip#updateAll
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Trips/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Trip#deleteById
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Trips/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Trip#count
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Trips/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Trip#prototype$updateAttributes
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Trips/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Trip#createChangeStream
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Trips/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.trips.findById() instead.
            "::findById::Dispatch::trips": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/trips/:fk",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.trips.destroyById() instead.
            "::destroyById::Dispatch::trips": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/trips/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.trips.updateById() instead.
            "::updateById::Dispatch::trips": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/trips/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Dispatch.trips() instead.
            "::get::Dispatch::trips": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/trips",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.trips.create() instead.
            "::create::Dispatch::trips": {
              url: urlBase + "/Dispatches/:id/trips",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.trips.createMany() instead.
            "::createMany::Dispatch::trips": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/trips",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.trips.destroyAll() instead.
            "::delete::Dispatch::trips": {
              url: urlBase + "/Dispatches/:id/trips",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.trips.count() instead.
            "::count::Dispatch::trips": {
              url: urlBase + "/Dispatches/:id/trips/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Trip#patchOrCreate
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Trip#updateOrCreate
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Trip#update
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Trip#destroyById
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Trip#removeById
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Trip#patchAttributes
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Trip#modelName
        * @propertyOf lbServices.Trip
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Trip`.
        */
        R.modelName = "Trip";


            /**
             * @ngdoc method
             * @name lbServices.Trip#employee
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Fetches belongsTo relation employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::Trip::employee"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Trip.locationReports
     * @header lbServices.Trip.locationReports
     * @object
     * @description
     *
     * The object `Trip.locationReports` groups methods
     * manipulating `LocationReport` instances related to `Trip`.
     *
     * Call {@link lbServices.Trip#locationReports Trip.locationReports()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Trip#locationReports
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Queries locationReports of Trip.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
        R.locationReports = function() {
          var TargetResource = $injector.get("LocationReport");
          var action = TargetResource["::get::Trip::locationReports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Trip.locationReports#count
             * @methodOf lbServices.Trip.locationReports
             *
             * @description
             *
             * Counts locationReports of Trip.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.locationReports.count = function() {
          var TargetResource = $injector.get("LocationReport");
          var action = TargetResource["::count::Trip::locationReports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Trip.locationReports#create
             * @methodOf lbServices.Trip.locationReports
             *
             * @description
             *
             * Creates a new instance in locationReports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
        R.locationReports.create = function() {
          var TargetResource = $injector.get("LocationReport");
          var action = TargetResource["::create::Trip::locationReports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Trip.locationReports#createMany
             * @methodOf lbServices.Trip.locationReports
             *
             * @description
             *
             * Creates a new instance in locationReports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
        R.locationReports.createMany = function() {
          var TargetResource = $injector.get("LocationReport");
          var action = TargetResource["::createMany::Trip::locationReports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Trip.locationReports#destroyAll
             * @methodOf lbServices.Trip.locationReports
             *
             * @description
             *
             * Deletes all locationReports of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.locationReports.destroyAll = function() {
          var TargetResource = $injector.get("LocationReport");
          var action = TargetResource["::delete::Trip::locationReports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Trip.locationReports#destroyById
             * @methodOf lbServices.Trip.locationReports
             *
             * @description
             *
             * Delete a related item by id for locationReports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for locationReports
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.locationReports.destroyById = function() {
          var TargetResource = $injector.get("LocationReport");
          var action = TargetResource["::destroyById::Trip::locationReports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Trip.locationReports#findById
             * @methodOf lbServices.Trip.locationReports
             *
             * @description
             *
             * Find a related item by id for locationReports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for locationReports
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
        R.locationReports.findById = function() {
          var TargetResource = $injector.get("LocationReport");
          var action = TargetResource["::findById::Trip::locationReports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Trip.locationReports#updateById
             * @methodOf lbServices.Trip.locationReports
             *
             * @description
             *
             * Update a related item by id for locationReports.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `fk` – `{*}` - Foreign key for locationReports
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LocationReport` object.)
             * </em>
             */
        R.locationReports.updateById = function() {
          var TargetResource = $injector.get("LocationReport");
          var action = TargetResource["::updateById::Trip::locationReports"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Trip#dispatch
             * @methodOf lbServices.Trip
             *
             * @description
             *
             * Fetches belongsTo relation dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.dispatch = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::get::Trip::dispatch"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ReportCode
 * @header lbServices.ReportCode
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ReportCode` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ReportCode",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ReportCodes/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ReportCode.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/ReportCodes/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use ReportCode.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/ReportCodes/:id/lastUpdatedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#create
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ReportCodes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#createMany
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ReportCodes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#upsert
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ReportCodes",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#replaceOrCreate
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ReportCodes/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#exists
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ReportCodes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#findById
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ReportCodes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#replaceById
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ReportCodes/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#find
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ReportCodes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#findOne
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ReportCodes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#updateAll
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ReportCodes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#deleteById
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ReportCodes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#count
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ReportCodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#prototype$updateAttributes
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ReportCodes/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#createChangeStream
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ReportCodes/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Report.codeInfo() instead.
            "::get::Report::codeInfo": {
              url: urlBase + "/Reports/:id/codeInfo",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ReportCode#patchOrCreate
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#updateOrCreate
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#update
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#destroyById
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#removeById
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#patchAttributes
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReportCode` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ReportCode#modelName
        * @propertyOf lbServices.ReportCode
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ReportCode`.
        */
        R.modelName = "ReportCode";

    /**
     * @ngdoc object
     * @name lbServices.ReportCode.createdBy
     * @header lbServices.ReportCode.createdBy
     * @object
     * @description
     *
     * The object `ReportCode.createdBy` groups methods
     * manipulating `User` instances related to `ReportCode`.
     *
     * Call {@link lbServices.ReportCode#createdBy ReportCode.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ReportCode#createManydBy
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ReportCode::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#createdBy
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ReportCode::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ReportCode#lastUpdatedBy
             * @methodOf lbServices.ReportCode
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ReportCode::lastUpdatedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Appointment
 * @header lbServices.Appointment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Appointment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Appointment",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Appointments/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Appointment.department() instead.
            "prototype$__get__department": {
              url: urlBase + "/Appointments/:id/department",
              method: "GET",
            },

            // INTERNAL. Use Appointment.employee() instead.
            "prototype$__get__employee": {
              url: urlBase + "/Appointments/:id/employee",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Appointment#create
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Appointments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Appointment#createMany
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Appointments",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Appointment#upsert
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Appointments",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Appointment#replaceOrCreate
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Appointments/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Appointment#exists
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Appointments/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Appointment#findById
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Appointments/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Appointment#replaceById
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Appointments/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Appointment#find
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Appointments",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Appointment#findOne
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Appointments/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Appointment#updateAll
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Appointments/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Appointment#deleteById
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Appointments/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Appointment#count
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Appointments/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Appointment#prototype$updateAttributes
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Appointments/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Appointment#createChangeStream
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Appointments/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Employee.appointments.findById() instead.
            "::findById::Employee::appointments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/appointments/:fk",
              method: "GET",
            },

            // INTERNAL. Use Employee.appointments.destroyById() instead.
            "::destroyById::Employee::appointments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/appointments/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.appointments.updateById() instead.
            "::updateById::Employee::appointments": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/appointments/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.appointments() instead.
            "::get::Employee::appointments": {
              isArray: true,
              url: urlBase + "/Employees/:id/appointments",
              method: "GET",
            },

            // INTERNAL. Use Employee.appointments.create() instead.
            "::create::Employee::appointments": {
              url: urlBase + "/Employees/:id/appointments",
              method: "POST",
            },

            // INTERNAL. Use Employee.appointments.createMany() instead.
            "::createMany::Employee::appointments": {
              isArray: true,
              url: urlBase + "/Employees/:id/appointments",
              method: "POST",
            },

            // INTERNAL. Use Employee.appointments.destroyAll() instead.
            "::delete::Employee::appointments": {
              url: urlBase + "/Employees/:id/appointments",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.appointments.count() instead.
            "::count::Employee::appointments": {
              url: urlBase + "/Employees/:id/appointments/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Appointment#patchOrCreate
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Appointment#updateOrCreate
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Appointment#update
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Appointment#destroyById
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Appointment#removeById
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Appointment#patchAttributes
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Appointment` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Appointment#modelName
        * @propertyOf lbServices.Appointment
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Appointment`.
        */
        R.modelName = "Appointment";


            /**
             * @ngdoc method
             * @name lbServices.Appointment#department
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Fetches belongsTo relation department.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Department` object.)
             * </em>
             */
        R.department = function() {
          var TargetResource = $injector.get("Department");
          var action = TargetResource["::get::Appointment::department"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Appointment#employee
             * @methodOf lbServices.Appointment
             *
             * @description
             *
             * Fetches belongsTo relation employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::Appointment::employee"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Dispatch
 * @header lbServices.Dispatch
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Dispatch` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Dispatch",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Dispatches/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Dispatch.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/Dispatches/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/Dispatches/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.report() instead.
            "prototype$__get__report": {
              url: urlBase + "/Dispatches/:id/report",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.equipment() instead.
            "prototype$__get__equipment": {
              url: urlBase + "/Dispatches/:id/equipment",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.employee() instead.
            "prototype$__get__employee": {
              url: urlBase + "/Dispatches/:id/employee",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.signIns.findById() instead.
            "prototype$__findById__signIns": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/signIns/:fk",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.signIns.destroyById() instead.
            "prototype$__destroyById__signIns": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/signIns/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.signIns.updateById() instead.
            "prototype$__updateById__signIns": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/signIns/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Dispatch.trips.findById() instead.
            "prototype$__findById__trips": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/trips/:fk",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.trips.destroyById() instead.
            "prototype$__destroyById__trips": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/trips/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.trips.updateById() instead.
            "prototype$__updateById__trips": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/trips/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Dispatch.maintains.findById() instead.
            "prototype$__findById__maintains": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/maintains/:fk",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.maintains.destroyById() instead.
            "prototype$__destroyById__maintains": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/maintains/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.maintains.updateById() instead.
            "prototype$__updateById__maintains": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/maintains/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Dispatch.applications.findById() instead.
            "prototype$__findById__applications": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/applications/:fk",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.applications.destroyById() instead.
            "prototype$__destroyById__applications": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/applications/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.applications.updateById() instead.
            "prototype$__updateById__applications": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/applications/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.findById() instead.
            "prototype$__findById__dispatchEmployees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/dispatchEmployees/:fk",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.destroyById() instead.
            "prototype$__destroyById__dispatchEmployees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/dispatchEmployees/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.updateById() instead.
            "prototype$__updateById__dispatchEmployees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/dispatchEmployees/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.link() instead.
            "prototype$__link__dispatchEmployees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/dispatchEmployees/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.unlink() instead.
            "prototype$__unlink__dispatchEmployees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/dispatchEmployees/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.exists() instead.
            "prototype$__exists__dispatchEmployees": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/dispatchEmployees/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Dispatch.serviceInfo() instead.
            "prototype$__get__serviceInfo": {
              url: urlBase + "/Dispatches/:id/serviceInfo",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.signIns() instead.
            "prototype$__get__signIns": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/signIns",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.signIns.create() instead.
            "prototype$__create__signIns": {
              url: urlBase + "/Dispatches/:id/signIns",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.signIns.destroyAll() instead.
            "prototype$__delete__signIns": {
              url: urlBase + "/Dispatches/:id/signIns",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.signIns.count() instead.
            "prototype$__count__signIns": {
              url: urlBase + "/Dispatches/:id/signIns/count",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.trips() instead.
            "prototype$__get__trips": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/trips",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.trips.create() instead.
            "prototype$__create__trips": {
              url: urlBase + "/Dispatches/:id/trips",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.trips.destroyAll() instead.
            "prototype$__delete__trips": {
              url: urlBase + "/Dispatches/:id/trips",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.trips.count() instead.
            "prototype$__count__trips": {
              url: urlBase + "/Dispatches/:id/trips/count",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.maintains() instead.
            "prototype$__get__maintains": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/maintains",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.maintains.create() instead.
            "prototype$__create__maintains": {
              url: urlBase + "/Dispatches/:id/maintains",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.maintains.destroyAll() instead.
            "prototype$__delete__maintains": {
              url: urlBase + "/Dispatches/:id/maintains",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.maintains.count() instead.
            "prototype$__count__maintains": {
              url: urlBase + "/Dispatches/:id/maintains/count",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.applications() instead.
            "prototype$__get__applications": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/applications",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.applications.create() instead.
            "prototype$__create__applications": {
              url: urlBase + "/Dispatches/:id/applications",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.applications.destroyAll() instead.
            "prototype$__delete__applications": {
              url: urlBase + "/Dispatches/:id/applications",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.applications.count() instead.
            "prototype$__count__applications": {
              url: urlBase + "/Dispatches/:id/applications/count",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees() instead.
            "prototype$__get__dispatchEmployees": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/dispatchEmployees",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.create() instead.
            "prototype$__create__dispatchEmployees": {
              url: urlBase + "/Dispatches/:id/dispatchEmployees",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.destroyAll() instead.
            "prototype$__delete__dispatchEmployees": {
              url: urlBase + "/Dispatches/:id/dispatchEmployees",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.dispatchEmployees.count() instead.
            "prototype$__count__dispatchEmployees": {
              url: urlBase + "/Dispatches/:id/dispatchEmployees/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#create
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Dispatches",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#createMany
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Dispatches",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#upsert
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Dispatches",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#replaceOrCreate
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Dispatches/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#exists
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Dispatches/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#findById
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Dispatches/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#replaceById
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Dispatches/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#find
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Dispatches",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#findOne
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Dispatches/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#updateAll
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Dispatches/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#deleteById
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Dispatches/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#count
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Dispatches/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#prototype$updateAttributes
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Dispatches/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#createChangeStream
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Dispatches/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#getOwnDispatches
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{dispatch=}` -
             */
            "getOwnDispatches": {
              url: urlBase + "/Dispatches/ownDispatches",
              method: "POST",
            },

            // INTERNAL. Use Equipment.dispatchLists.findById() instead.
            "::findById::Equipment::dispatchLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/dispatchLists/:fk",
              method: "GET",
            },

            // INTERNAL. Use Equipment.dispatchLists.destroyById() instead.
            "::destroyById::Equipment::dispatchLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/dispatchLists/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.dispatchLists.updateById() instead.
            "::updateById::Equipment::dispatchLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/dispatchLists/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Equipment.dispatchLists() instead.
            "::get::Equipment::dispatchLists": {
              isArray: true,
              url: urlBase + "/Equipment/:id/dispatchLists",
              method: "GET",
            },

            // INTERNAL. Use Equipment.dispatchLists.create() instead.
            "::create::Equipment::dispatchLists": {
              url: urlBase + "/Equipment/:id/dispatchLists",
              method: "POST",
            },

            // INTERNAL. Use Equipment.dispatchLists.createMany() instead.
            "::createMany::Equipment::dispatchLists": {
              isArray: true,
              url: urlBase + "/Equipment/:id/dispatchLists",
              method: "POST",
            },

            // INTERNAL. Use Equipment.dispatchLists.destroyAll() instead.
            "::delete::Equipment::dispatchLists": {
              url: urlBase + "/Equipment/:id/dispatchLists",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.dispatchLists.count() instead.
            "::count::Equipment::dispatchLists": {
              url: urlBase + "/Equipment/:id/dispatchLists/count",
              method: "GET",
            },

            // INTERNAL. Use Report.dispatch() instead.
            "::get::Report::dispatch": {
              url: urlBase + "/Reports/:id/dispatch",
              method: "GET",
            },

            // INTERNAL. Use Report.dispatch.create() instead.
            "::create::Report::dispatch": {
              url: urlBase + "/Reports/:id/dispatch",
              method: "POST",
            },

            // INTERNAL. Use Report.dispatch.createMany() instead.
            "::createMany::Report::dispatch": {
              isArray: true,
              url: urlBase + "/Reports/:id/dispatch",
              method: "POST",
            },

            // INTERNAL. Use Report.dispatch.update() instead.
            "::update::Report::dispatch": {
              url: urlBase + "/Reports/:id/dispatch",
              method: "PUT",
            },

            // INTERNAL. Use Report.dispatch.destroy() instead.
            "::destroy::Report::dispatch": {
              url: urlBase + "/Reports/:id/dispatch",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.employeeDispatches.findById() instead.
            "::findById::Employee::employeeDispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/employeeDispatches/:fk",
              method: "GET",
            },

            // INTERNAL. Use Employee.employeeDispatches.destroyById() instead.
            "::destroyById::Employee::employeeDispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/employeeDispatches/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.employeeDispatches.updateById() instead.
            "::updateById::Employee::employeeDispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/employeeDispatches/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.employeeDispatches.link() instead.
            "::link::Employee::employeeDispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/employeeDispatches/rel/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.employeeDispatches.unlink() instead.
            "::unlink::Employee::employeeDispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/employeeDispatches/rel/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.employeeDispatches.exists() instead.
            "::exists::Employee::employeeDispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/employeeDispatches/rel/:fk",
              method: "HEAD",
            },

            // INTERNAL. Use Employee.employeeDispatches() instead.
            "::get::Employee::employeeDispatches": {
              isArray: true,
              url: urlBase + "/Employees/:id/employeeDispatches",
              method: "GET",
            },

            // INTERNAL. Use Employee.employeeDispatches.create() instead.
            "::create::Employee::employeeDispatches": {
              url: urlBase + "/Employees/:id/employeeDispatches",
              method: "POST",
            },

            // INTERNAL. Use Employee.employeeDispatches.createMany() instead.
            "::createMany::Employee::employeeDispatches": {
              isArray: true,
              url: urlBase + "/Employees/:id/employeeDispatches",
              method: "POST",
            },

            // INTERNAL. Use Employee.employeeDispatches.destroyAll() instead.
            "::delete::Employee::employeeDispatches": {
              url: urlBase + "/Employees/:id/employeeDispatches",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.employeeDispatches.count() instead.
            "::count::Employee::employeeDispatches": {
              url: urlBase + "/Employees/:id/employeeDispatches/count",
              method: "GET",
            },

            // INTERNAL. Use SignIn.dispatch() instead.
            "::get::SignIn::dispatch": {
              url: urlBase + "/SignIns/:id/dispatch",
              method: "GET",
            },

            // INTERNAL. Use Trip.dispatch() instead.
            "::get::Trip::dispatch": {
              url: urlBase + "/Trips/:id/dispatch",
              method: "GET",
            },

            // INTERNAL. Use Maintain.dispatch() instead.
            "::get::Maintain::dispatch": {
              url: urlBase + "/Maintains/:id/dispatch",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.dispatch() instead.
            "::get::AccessoryApplication::dispatch": {
              url: urlBase + "/AccessoryApplications/:id/dispatch",
              method: "GET",
            },

            // INTERNAL. Use DispatchEmployee.dispatch() instead.
            "::get::DispatchEmployee::dispatch": {
              url: urlBase + "/DispatchEmployees/:id/dispatch",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Dispatch#patchOrCreate
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#updateOrCreate
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#update
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#destroyById
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#removeById
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#patchAttributes
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Dispatch#modelName
        * @propertyOf lbServices.Dispatch
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Dispatch`.
        */
        R.modelName = "Dispatch";

    /**
     * @ngdoc object
     * @name lbServices.Dispatch.createdBy
     * @header lbServices.Dispatch.createdBy
     * @object
     * @description
     *
     * The object `Dispatch.createdBy` groups methods
     * manipulating `User` instances related to `Dispatch`.
     *
     * Call {@link lbServices.Dispatch#createdBy Dispatch.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Dispatch#createManydBy
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Dispatch::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#createdBy
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Dispatch::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#lastUpdatedBy
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Dispatch::lastUpdatedBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#report
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Fetches belongsTo relation report.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.report = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::get::Dispatch::report"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#equipment
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Fetches belongsTo relation equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R.equipment = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::get::Dispatch::equipment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#employee
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Fetches belongsTo relation employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::Dispatch::employee"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Dispatch.signIns
     * @header lbServices.Dispatch.signIns
     * @object
     * @description
     *
     * The object `Dispatch.signIns` groups methods
     * manipulating `SignIn` instances related to `Dispatch`.
     *
     * Call {@link lbServices.Dispatch#signIns Dispatch.signIns()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Dispatch#signIns
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Queries signIns of Dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
        R.signIns = function() {
          var TargetResource = $injector.get("SignIn");
          var action = TargetResource["::get::Dispatch::signIns"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.signIns#count
             * @methodOf lbServices.Dispatch.signIns
             *
             * @description
             *
             * Counts signIns of Dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.signIns.count = function() {
          var TargetResource = $injector.get("SignIn");
          var action = TargetResource["::count::Dispatch::signIns"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.signIns#create
             * @methodOf lbServices.Dispatch.signIns
             *
             * @description
             *
             * Creates a new instance in signIns of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
        R.signIns.create = function() {
          var TargetResource = $injector.get("SignIn");
          var action = TargetResource["::create::Dispatch::signIns"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.signIns#createMany
             * @methodOf lbServices.Dispatch.signIns
             *
             * @description
             *
             * Creates a new instance in signIns of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
        R.signIns.createMany = function() {
          var TargetResource = $injector.get("SignIn");
          var action = TargetResource["::createMany::Dispatch::signIns"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.signIns#destroyAll
             * @methodOf lbServices.Dispatch.signIns
             *
             * @description
             *
             * Deletes all signIns of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.signIns.destroyAll = function() {
          var TargetResource = $injector.get("SignIn");
          var action = TargetResource["::delete::Dispatch::signIns"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.signIns#destroyById
             * @methodOf lbServices.Dispatch.signIns
             *
             * @description
             *
             * Delete a related item by id for signIns.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for signIns
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.signIns.destroyById = function() {
          var TargetResource = $injector.get("SignIn");
          var action = TargetResource["::destroyById::Dispatch::signIns"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.signIns#findById
             * @methodOf lbServices.Dispatch.signIns
             *
             * @description
             *
             * Find a related item by id for signIns.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for signIns
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
        R.signIns.findById = function() {
          var TargetResource = $injector.get("SignIn");
          var action = TargetResource["::findById::Dispatch::signIns"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.signIns#updateById
             * @methodOf lbServices.Dispatch.signIns
             *
             * @description
             *
             * Update a related item by id for signIns.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for signIns
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SignIn` object.)
             * </em>
             */
        R.signIns.updateById = function() {
          var TargetResource = $injector.get("SignIn");
          var action = TargetResource["::updateById::Dispatch::signIns"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Dispatch.trips
     * @header lbServices.Dispatch.trips
     * @object
     * @description
     *
     * The object `Dispatch.trips` groups methods
     * manipulating `Trip` instances related to `Dispatch`.
     *
     * Call {@link lbServices.Dispatch#trips Dispatch.trips()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Dispatch#trips
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Queries trips of Dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
        R.trips = function() {
          var TargetResource = $injector.get("Trip");
          var action = TargetResource["::get::Dispatch::trips"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.trips#count
             * @methodOf lbServices.Dispatch.trips
             *
             * @description
             *
             * Counts trips of Dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.trips.count = function() {
          var TargetResource = $injector.get("Trip");
          var action = TargetResource["::count::Dispatch::trips"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.trips#create
             * @methodOf lbServices.Dispatch.trips
             *
             * @description
             *
             * Creates a new instance in trips of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
        R.trips.create = function() {
          var TargetResource = $injector.get("Trip");
          var action = TargetResource["::create::Dispatch::trips"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.trips#createMany
             * @methodOf lbServices.Dispatch.trips
             *
             * @description
             *
             * Creates a new instance in trips of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
        R.trips.createMany = function() {
          var TargetResource = $injector.get("Trip");
          var action = TargetResource["::createMany::Dispatch::trips"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.trips#destroyAll
             * @methodOf lbServices.Dispatch.trips
             *
             * @description
             *
             * Deletes all trips of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.trips.destroyAll = function() {
          var TargetResource = $injector.get("Trip");
          var action = TargetResource["::delete::Dispatch::trips"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.trips#destroyById
             * @methodOf lbServices.Dispatch.trips
             *
             * @description
             *
             * Delete a related item by id for trips.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for trips
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.trips.destroyById = function() {
          var TargetResource = $injector.get("Trip");
          var action = TargetResource["::destroyById::Dispatch::trips"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.trips#findById
             * @methodOf lbServices.Dispatch.trips
             *
             * @description
             *
             * Find a related item by id for trips.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for trips
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
        R.trips.findById = function() {
          var TargetResource = $injector.get("Trip");
          var action = TargetResource["::findById::Dispatch::trips"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.trips#updateById
             * @methodOf lbServices.Dispatch.trips
             *
             * @description
             *
             * Update a related item by id for trips.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for trips
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Trip` object.)
             * </em>
             */
        R.trips.updateById = function() {
          var TargetResource = $injector.get("Trip");
          var action = TargetResource["::updateById::Dispatch::trips"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Dispatch.maintains
     * @header lbServices.Dispatch.maintains
     * @object
     * @description
     *
     * The object `Dispatch.maintains` groups methods
     * manipulating `Maintain` instances related to `Dispatch`.
     *
     * Call {@link lbServices.Dispatch#maintains Dispatch.maintains()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Dispatch#maintains
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Queries maintains of Dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R.maintains = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::get::Dispatch::maintains"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.maintains#count
             * @methodOf lbServices.Dispatch.maintains
             *
             * @description
             *
             * Counts maintains of Dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.maintains.count = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::count::Dispatch::maintains"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.maintains#create
             * @methodOf lbServices.Dispatch.maintains
             *
             * @description
             *
             * Creates a new instance in maintains of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R.maintains.create = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::create::Dispatch::maintains"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.maintains#createMany
             * @methodOf lbServices.Dispatch.maintains
             *
             * @description
             *
             * Creates a new instance in maintains of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R.maintains.createMany = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::createMany::Dispatch::maintains"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.maintains#destroyAll
             * @methodOf lbServices.Dispatch.maintains
             *
             * @description
             *
             * Deletes all maintains of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.maintains.destroyAll = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::delete::Dispatch::maintains"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.maintains#destroyById
             * @methodOf lbServices.Dispatch.maintains
             *
             * @description
             *
             * Delete a related item by id for maintains.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for maintains
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.maintains.destroyById = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::destroyById::Dispatch::maintains"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.maintains#findById
             * @methodOf lbServices.Dispatch.maintains
             *
             * @description
             *
             * Find a related item by id for maintains.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for maintains
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R.maintains.findById = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::findById::Dispatch::maintains"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.maintains#updateById
             * @methodOf lbServices.Dispatch.maintains
             *
             * @description
             *
             * Update a related item by id for maintains.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for maintains
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R.maintains.updateById = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::updateById::Dispatch::maintains"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Dispatch.applications
     * @header lbServices.Dispatch.applications
     * @object
     * @description
     *
     * The object `Dispatch.applications` groups methods
     * manipulating `AccessoryApplication` instances related to `Dispatch`.
     *
     * Call {@link lbServices.Dispatch#applications Dispatch.applications()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Dispatch#applications
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Queries applications of Dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R.applications = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::get::Dispatch::applications"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.applications#count
             * @methodOf lbServices.Dispatch.applications
             *
             * @description
             *
             * Counts applications of Dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.applications.count = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::count::Dispatch::applications"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.applications#create
             * @methodOf lbServices.Dispatch.applications
             *
             * @description
             *
             * Creates a new instance in applications of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R.applications.create = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::create::Dispatch::applications"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.applications#createMany
             * @methodOf lbServices.Dispatch.applications
             *
             * @description
             *
             * Creates a new instance in applications of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R.applications.createMany = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::createMany::Dispatch::applications"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.applications#destroyAll
             * @methodOf lbServices.Dispatch.applications
             *
             * @description
             *
             * Deletes all applications of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.applications.destroyAll = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::delete::Dispatch::applications"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.applications#destroyById
             * @methodOf lbServices.Dispatch.applications
             *
             * @description
             *
             * Delete a related item by id for applications.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for applications
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.applications.destroyById = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::destroyById::Dispatch::applications"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.applications#findById
             * @methodOf lbServices.Dispatch.applications
             *
             * @description
             *
             * Find a related item by id for applications.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for applications
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R.applications.findById = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::findById::Dispatch::applications"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.applications#updateById
             * @methodOf lbServices.Dispatch.applications
             *
             * @description
             *
             * Update a related item by id for applications.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for applications
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R.applications.updateById = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::updateById::Dispatch::applications"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Dispatch.dispatchEmployees
     * @header lbServices.Dispatch.dispatchEmployees
     * @object
     * @description
     *
     * The object `Dispatch.dispatchEmployees` groups methods
     * manipulating `Employee` instances related to `Dispatch`.
     *
     * Call {@link lbServices.Dispatch#dispatchEmployees Dispatch.dispatchEmployees()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Dispatch#dispatchEmployees
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Queries dispatchEmployees of Dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.dispatchEmployees = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::Dispatch::dispatchEmployees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.dispatchEmployees#count
             * @methodOf lbServices.Dispatch.dispatchEmployees
             *
             * @description
             *
             * Counts dispatchEmployees of Dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.dispatchEmployees.count = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::count::Dispatch::dispatchEmployees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.dispatchEmployees#create
             * @methodOf lbServices.Dispatch.dispatchEmployees
             *
             * @description
             *
             * Creates a new instance in dispatchEmployees of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.dispatchEmployees.create = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::create::Dispatch::dispatchEmployees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.dispatchEmployees#createMany
             * @methodOf lbServices.Dispatch.dispatchEmployees
             *
             * @description
             *
             * Creates a new instance in dispatchEmployees of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.dispatchEmployees.createMany = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::createMany::Dispatch::dispatchEmployees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.dispatchEmployees#destroyAll
             * @methodOf lbServices.Dispatch.dispatchEmployees
             *
             * @description
             *
             * Deletes all dispatchEmployees of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.dispatchEmployees.destroyAll = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::delete::Dispatch::dispatchEmployees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.dispatchEmployees#destroyById
             * @methodOf lbServices.Dispatch.dispatchEmployees
             *
             * @description
             *
             * Delete a related item by id for dispatchEmployees.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for dispatchEmployees
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.dispatchEmployees.destroyById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::destroyById::Dispatch::dispatchEmployees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.dispatchEmployees#exists
             * @methodOf lbServices.Dispatch.dispatchEmployees
             *
             * @description
             *
             * Check the existence of dispatchEmployees relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for dispatchEmployees
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.dispatchEmployees.exists = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::exists::Dispatch::dispatchEmployees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.dispatchEmployees#findById
             * @methodOf lbServices.Dispatch.dispatchEmployees
             *
             * @description
             *
             * Find a related item by id for dispatchEmployees.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for dispatchEmployees
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.dispatchEmployees.findById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::findById::Dispatch::dispatchEmployees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.dispatchEmployees#link
             * @methodOf lbServices.Dispatch.dispatchEmployees
             *
             * @description
             *
             * Add a related item by id for dispatchEmployees.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for dispatchEmployees
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.dispatchEmployees.link = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::link::Dispatch::dispatchEmployees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.dispatchEmployees#unlink
             * @methodOf lbServices.Dispatch.dispatchEmployees
             *
             * @description
             *
             * Remove the dispatchEmployees relation to an item by id.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for dispatchEmployees
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.dispatchEmployees.unlink = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::unlink::Dispatch::dispatchEmployees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch.dispatchEmployees#updateById
             * @methodOf lbServices.Dispatch.dispatchEmployees
             *
             * @description
             *
             * Update a related item by id for dispatchEmployees.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for dispatchEmployees
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.dispatchEmployees.updateById = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::updateById::Dispatch::dispatchEmployees"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Dispatch#serviceInfo
             * @methodOf lbServices.Dispatch
             *
             * @description
             *
             * Fetches belongsTo relation serviceInfo.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
        R.serviceInfo = function() {
          var TargetResource = $injector.get("Service");
          var action = TargetResource["::get::Dispatch::serviceInfo"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Maintain
 * @header lbServices.Maintain
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Maintain` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Maintain",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Maintains/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Maintain.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/Maintains/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use Maintain.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/Maintains/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use Maintain.dispatch() instead.
            "prototype$__get__dispatch": {
              url: urlBase + "/Maintains/:id/dispatch",
              method: "GET",
            },

            // INTERNAL. Use Maintain.engineer() instead.
            "prototype$__get__engineer": {
              url: urlBase + "/Maintains/:id/engineer",
              method: "GET",
            },

            // INTERNAL. Use Maintain.workLogs.findById() instead.
            "prototype$__findById__workLogs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Maintains/:id/workLogs/:fk",
              method: "GET",
            },

            // INTERNAL. Use Maintain.workLogs.destroyById() instead.
            "prototype$__destroyById__workLogs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Maintains/:id/workLogs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Maintain.workLogs.updateById() instead.
            "prototype$__updateById__workLogs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Maintains/:id/workLogs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Maintain.workLogs() instead.
            "prototype$__get__workLogs": {
              isArray: true,
              url: urlBase + "/Maintains/:id/workLogs",
              method: "GET",
            },

            // INTERNAL. Use Maintain.workLogs.create() instead.
            "prototype$__create__workLogs": {
              url: urlBase + "/Maintains/:id/workLogs",
              method: "POST",
            },

            // INTERNAL. Use Maintain.workLogs.destroyAll() instead.
            "prototype$__delete__workLogs": {
              url: urlBase + "/Maintains/:id/workLogs",
              method: "DELETE",
            },

            // INTERNAL. Use Maintain.workLogs.count() instead.
            "prototype$__count__workLogs": {
              url: urlBase + "/Maintains/:id/workLogs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Maintain#create
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Maintains",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Maintain#createMany
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Maintains",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Maintain#upsert
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Maintains",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Maintain#replaceOrCreate
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Maintains/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Maintain#exists
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Maintains/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Maintain#findById
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Maintains/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Maintain#replaceById
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Maintains/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Maintain#find
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Maintains",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Maintain#findOne
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Maintains/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Maintain#updateAll
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Maintains/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Maintain#deleteById
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Maintains/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Maintain#count
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Maintains/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Maintain#prototype$updateAttributes
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Maintains/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Maintain#createChangeStream
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Maintains/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Employee.maintains.findById() instead.
            "::findById::Employee::maintains": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/maintains/:fk",
              method: "GET",
            },

            // INTERNAL. Use Employee.maintains.destroyById() instead.
            "::destroyById::Employee::maintains": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/maintains/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.maintains.updateById() instead.
            "::updateById::Employee::maintains": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/maintains/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.maintains() instead.
            "::get::Employee::maintains": {
              isArray: true,
              url: urlBase + "/Employees/:id/maintains",
              method: "GET",
            },

            // INTERNAL. Use Employee.maintains.create() instead.
            "::create::Employee::maintains": {
              url: urlBase + "/Employees/:id/maintains",
              method: "POST",
            },

            // INTERNAL. Use Employee.maintains.createMany() instead.
            "::createMany::Employee::maintains": {
              isArray: true,
              url: urlBase + "/Employees/:id/maintains",
              method: "POST",
            },

            // INTERNAL. Use Employee.maintains.destroyAll() instead.
            "::delete::Employee::maintains": {
              url: urlBase + "/Employees/:id/maintains",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.maintains.count() instead.
            "::count::Employee::maintains": {
              url: urlBase + "/Employees/:id/maintains/count",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.maintains.findById() instead.
            "::findById::Dispatch::maintains": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/maintains/:fk",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.maintains.destroyById() instead.
            "::destroyById::Dispatch::maintains": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/maintains/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.maintains.updateById() instead.
            "::updateById::Dispatch::maintains": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/maintains/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Dispatch.maintains() instead.
            "::get::Dispatch::maintains": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/maintains",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.maintains.create() instead.
            "::create::Dispatch::maintains": {
              url: urlBase + "/Dispatches/:id/maintains",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.maintains.createMany() instead.
            "::createMany::Dispatch::maintains": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/maintains",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.maintains.destroyAll() instead.
            "::delete::Dispatch::maintains": {
              url: urlBase + "/Dispatches/:id/maintains",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.maintains.count() instead.
            "::count::Dispatch::maintains": {
              url: urlBase + "/Dispatches/:id/maintains/count",
              method: "GET",
            },

            // INTERNAL. Use WorkLog.maintain() instead.
            "::get::WorkLog::maintain": {
              url: urlBase + "/WorkLogs/:id/maintain",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Maintain#patchOrCreate
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Maintain#updateOrCreate
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Maintain#update
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Maintain#destroyById
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Maintain#removeById
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Maintain#patchAttributes
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Maintain#modelName
        * @propertyOf lbServices.Maintain
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Maintain`.
        */
        R.modelName = "Maintain";

    /**
     * @ngdoc object
     * @name lbServices.Maintain.createdBy
     * @header lbServices.Maintain.createdBy
     * @object
     * @description
     *
     * The object `Maintain.createdBy` groups methods
     * manipulating `User` instances related to `Maintain`.
     *
     * Call {@link lbServices.Maintain#createdBy Maintain.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Maintain#createManydBy
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Maintain::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Maintain#createdBy
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Maintain::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Maintain#lastUpdatedBy
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::Maintain::lastUpdatedBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Maintain#dispatch
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Fetches belongsTo relation dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.dispatch = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::get::Maintain::dispatch"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Maintain#engineer
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Fetches belongsTo relation engineer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.engineer = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::Maintain::engineer"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Maintain.workLogs
     * @header lbServices.Maintain.workLogs
     * @object
     * @description
     *
     * The object `Maintain.workLogs` groups methods
     * manipulating `WorkLog` instances related to `Maintain`.
     *
     * Call {@link lbServices.Maintain#workLogs Maintain.workLogs()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Maintain#workLogs
             * @methodOf lbServices.Maintain
             *
             * @description
             *
             * Queries workLogs of Maintain.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
        R.workLogs = function() {
          var TargetResource = $injector.get("WorkLog");
          var action = TargetResource["::get::Maintain::workLogs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Maintain.workLogs#count
             * @methodOf lbServices.Maintain.workLogs
             *
             * @description
             *
             * Counts workLogs of Maintain.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.workLogs.count = function() {
          var TargetResource = $injector.get("WorkLog");
          var action = TargetResource["::count::Maintain::workLogs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Maintain.workLogs#create
             * @methodOf lbServices.Maintain.workLogs
             *
             * @description
             *
             * Creates a new instance in workLogs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
        R.workLogs.create = function() {
          var TargetResource = $injector.get("WorkLog");
          var action = TargetResource["::create::Maintain::workLogs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Maintain.workLogs#createMany
             * @methodOf lbServices.Maintain.workLogs
             *
             * @description
             *
             * Creates a new instance in workLogs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
        R.workLogs.createMany = function() {
          var TargetResource = $injector.get("WorkLog");
          var action = TargetResource["::createMany::Maintain::workLogs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Maintain.workLogs#destroyAll
             * @methodOf lbServices.Maintain.workLogs
             *
             * @description
             *
             * Deletes all workLogs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.workLogs.destroyAll = function() {
          var TargetResource = $injector.get("WorkLog");
          var action = TargetResource["::delete::Maintain::workLogs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Maintain.workLogs#destroyById
             * @methodOf lbServices.Maintain.workLogs
             *
             * @description
             *
             * Delete a related item by id for workLogs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for workLogs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.workLogs.destroyById = function() {
          var TargetResource = $injector.get("WorkLog");
          var action = TargetResource["::destroyById::Maintain::workLogs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Maintain.workLogs#findById
             * @methodOf lbServices.Maintain.workLogs
             *
             * @description
             *
             * Find a related item by id for workLogs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for workLogs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
        R.workLogs.findById = function() {
          var TargetResource = $injector.get("WorkLog");
          var action = TargetResource["::findById::Maintain::workLogs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Maintain.workLogs#updateById
             * @methodOf lbServices.Maintain.workLogs
             *
             * @description
             *
             * Update a related item by id for workLogs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for workLogs
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
        R.workLogs.updateById = function() {
          var TargetResource = $injector.get("WorkLog");
          var action = TargetResource["::updateById::Maintain::workLogs"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AccessoryApplication
 * @header lbServices.AccessoryApplication
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AccessoryApplication` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AccessoryApplication",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/AccessoryApplications/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use AccessoryApplication.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/AccessoryApplications/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/AccessoryApplications/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.employeeInCharge() instead.
            "prototype$__get__employeeInCharge": {
              url: urlBase + "/AccessoryApplications/:id/employeeInCharge",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.dispatch() instead.
            "prototype$__get__dispatch": {
              url: urlBase + "/AccessoryApplications/:id/dispatch",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.equipment() instead.
            "prototype$__get__equipment": {
              url: urlBase + "/AccessoryApplications/:id/equipment",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.applicant() instead.
            "prototype$__get__applicant": {
              url: urlBase + "/AccessoryApplications/:id/applicant",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.feedbackEmployee() instead.
            "prototype$__get__feedbackEmployee": {
              url: urlBase + "/AccessoryApplications/:id/feedbackEmployee",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList.findById() instead.
            "prototype$__findById__applyAccessoryList": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList/:fk",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList.destroyById() instead.
            "prototype$__destroyById__applyAccessoryList": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList.updateById() instead.
            "prototype$__updateById__applyAccessoryList": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList() instead.
            "prototype$__get__applyAccessoryList": {
              isArray: true,
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList.create() instead.
            "prototype$__create__applyAccessoryList": {
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList",
              method: "POST",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList.destroyAll() instead.
            "prototype$__delete__applyAccessoryList": {
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList",
              method: "DELETE",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList.count() instead.
            "prototype$__count__applyAccessoryList": {
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#create
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/AccessoryApplications",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#createMany
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/AccessoryApplications",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#upsert
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/AccessoryApplications",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#replaceOrCreate
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/AccessoryApplications/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#exists
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/AccessoryApplications/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#findById
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/AccessoryApplications/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#replaceById
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/AccessoryApplications/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#find
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/AccessoryApplications",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#findOne
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/AccessoryApplications/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#updateAll
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/AccessoryApplications/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#deleteById
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/AccessoryApplications/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#count
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/AccessoryApplications/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#prototype$updateAttributes
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/AccessoryApplications/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#createChangeStream
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/AccessoryApplications/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#getOwnApplications
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{accessoryApplication=}` -
             */
            "getOwnApplications": {
              url: urlBase + "/AccessoryApplications/ownApplications",
              method: "POST",
            },

            // INTERNAL. Use Employee.accessoryApplications.findById() instead.
            "::findById::Employee::accessoryApplications": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/accessoryApplications/:fk",
              method: "GET",
            },

            // INTERNAL. Use Employee.accessoryApplications.destroyById() instead.
            "::destroyById::Employee::accessoryApplications": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/accessoryApplications/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.accessoryApplications.updateById() instead.
            "::updateById::Employee::accessoryApplications": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/accessoryApplications/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.accessoryApplications() instead.
            "::get::Employee::accessoryApplications": {
              isArray: true,
              url: urlBase + "/Employees/:id/accessoryApplications",
              method: "GET",
            },

            // INTERNAL. Use Employee.accessoryApplications.create() instead.
            "::create::Employee::accessoryApplications": {
              url: urlBase + "/Employees/:id/accessoryApplications",
              method: "POST",
            },

            // INTERNAL. Use Employee.accessoryApplications.createMany() instead.
            "::createMany::Employee::accessoryApplications": {
              isArray: true,
              url: urlBase + "/Employees/:id/accessoryApplications",
              method: "POST",
            },

            // INTERNAL. Use Employee.accessoryApplications.destroyAll() instead.
            "::delete::Employee::accessoryApplications": {
              url: urlBase + "/Employees/:id/accessoryApplications",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.accessoryApplications.count() instead.
            "::count::Employee::accessoryApplications": {
              url: urlBase + "/Employees/:id/accessoryApplications/count",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.applications.findById() instead.
            "::findById::Dispatch::applications": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/applications/:fk",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.applications.destroyById() instead.
            "::destroyById::Dispatch::applications": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/applications/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.applications.updateById() instead.
            "::updateById::Dispatch::applications": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Dispatches/:id/applications/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Dispatch.applications() instead.
            "::get::Dispatch::applications": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/applications",
              method: "GET",
            },

            // INTERNAL. Use Dispatch.applications.create() instead.
            "::create::Dispatch::applications": {
              url: urlBase + "/Dispatches/:id/applications",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.applications.createMany() instead.
            "::createMany::Dispatch::applications": {
              isArray: true,
              url: urlBase + "/Dispatches/:id/applications",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.applications.destroyAll() instead.
            "::delete::Dispatch::applications": {
              url: urlBase + "/Dispatches/:id/applications",
              method: "DELETE",
            },

            // INTERNAL. Use Dispatch.applications.count() instead.
            "::count::Dispatch::applications": {
              url: urlBase + "/Dispatches/:id/applications/count",
              method: "GET",
            },

            // INTERNAL. Use ApplyAccessoryList.application() instead.
            "::get::ApplyAccessoryList::application": {
              url: urlBase + "/ApplyAccessoryLists/:id/application",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#patchOrCreate
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#updateOrCreate
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#update
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#destroyById
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#removeById
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#patchAttributes
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.AccessoryApplication#modelName
        * @propertyOf lbServices.AccessoryApplication
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AccessoryApplication`.
        */
        R.modelName = "AccessoryApplication";

    /**
     * @ngdoc object
     * @name lbServices.AccessoryApplication.createdBy
     * @header lbServices.AccessoryApplication.createdBy
     * @object
     * @description
     *
     * The object `AccessoryApplication.createdBy` groups methods
     * manipulating `User` instances related to `AccessoryApplication`.
     *
     * Call {@link lbServices.AccessoryApplication#createdBy AccessoryApplication.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#createManydBy
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::AccessoryApplication::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#createdBy
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::AccessoryApplication::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#lastUpdatedBy
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::AccessoryApplication::lastUpdatedBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#employeeInCharge
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Fetches belongsTo relation employeeInCharge.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employeeInCharge = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::AccessoryApplication::employeeInCharge"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#dispatch
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Fetches belongsTo relation dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.dispatch = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::get::AccessoryApplication::dispatch"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#equipment
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Fetches belongsTo relation equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R.equipment = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::get::AccessoryApplication::equipment"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#applicant
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Fetches belongsTo relation applicant.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.applicant = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::AccessoryApplication::applicant"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#feedbackEmployee
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Fetches belongsTo relation feedbackEmployee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.feedbackEmployee = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::AccessoryApplication::feedbackEmployee"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AccessoryApplication.applyAccessoryList
     * @header lbServices.AccessoryApplication.applyAccessoryList
     * @object
     * @description
     *
     * The object `AccessoryApplication.applyAccessoryList` groups methods
     * manipulating `ApplyAccessoryList` instances related to `AccessoryApplication`.
     *
     * Call {@link lbServices.AccessoryApplication#applyAccessoryList AccessoryApplication.applyAccessoryList()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication#applyAccessoryList
             * @methodOf lbServices.AccessoryApplication
             *
             * @description
             *
             * Queries applyAccessoryList of AccessoryApplication.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `filter` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
        R.applyAccessoryList = function() {
          var TargetResource = $injector.get("ApplyAccessoryList");
          var action = TargetResource["::get::AccessoryApplication::applyAccessoryList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication.applyAccessoryList#count
             * @methodOf lbServices.AccessoryApplication.applyAccessoryList
             *
             * @description
             *
             * Counts applyAccessoryList of AccessoryApplication.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.applyAccessoryList.count = function() {
          var TargetResource = $injector.get("ApplyAccessoryList");
          var action = TargetResource["::count::AccessoryApplication::applyAccessoryList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication.applyAccessoryList#create
             * @methodOf lbServices.AccessoryApplication.applyAccessoryList
             *
             * @description
             *
             * Creates a new instance in applyAccessoryList of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
        R.applyAccessoryList.create = function() {
          var TargetResource = $injector.get("ApplyAccessoryList");
          var action = TargetResource["::create::AccessoryApplication::applyAccessoryList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication.applyAccessoryList#createMany
             * @methodOf lbServices.AccessoryApplication.applyAccessoryList
             *
             * @description
             *
             * Creates a new instance in applyAccessoryList of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
        R.applyAccessoryList.createMany = function() {
          var TargetResource = $injector.get("ApplyAccessoryList");
          var action = TargetResource["::createMany::AccessoryApplication::applyAccessoryList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication.applyAccessoryList#destroyAll
             * @methodOf lbServices.AccessoryApplication.applyAccessoryList
             *
             * @description
             *
             * Deletes all applyAccessoryList of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.applyAccessoryList.destroyAll = function() {
          var TargetResource = $injector.get("ApplyAccessoryList");
          var action = TargetResource["::delete::AccessoryApplication::applyAccessoryList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication.applyAccessoryList#destroyById
             * @methodOf lbServices.AccessoryApplication.applyAccessoryList
             *
             * @description
             *
             * Delete a related item by id for applyAccessoryList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for applyAccessoryList
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.applyAccessoryList.destroyById = function() {
          var TargetResource = $injector.get("ApplyAccessoryList");
          var action = TargetResource["::destroyById::AccessoryApplication::applyAccessoryList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication.applyAccessoryList#findById
             * @methodOf lbServices.AccessoryApplication.applyAccessoryList
             *
             * @description
             *
             * Find a related item by id for applyAccessoryList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for applyAccessoryList
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
        R.applyAccessoryList.findById = function() {
          var TargetResource = $injector.get("ApplyAccessoryList");
          var action = TargetResource["::findById::AccessoryApplication::applyAccessoryList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryApplication.applyAccessoryList#updateById
             * @methodOf lbServices.AccessoryApplication.applyAccessoryList
             *
             * @description
             *
             * Update a related item by id for applyAccessoryList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `fk` – `{*}` - Foreign key for applyAccessoryList
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
        R.applyAccessoryList.updateById = function() {
          var TargetResource = $injector.get("ApplyAccessoryList");
          var action = TargetResource["::updateById::AccessoryApplication::applyAccessoryList"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.DispatchEmployee
 * @header lbServices.DispatchEmployee
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DispatchEmployee` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "DispatchEmployee",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/DispatchEmployees/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use DispatchEmployee.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/DispatchEmployees/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use DispatchEmployee.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/DispatchEmployees/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use DispatchEmployee.dispatch() instead.
            "prototype$__get__dispatch": {
              url: urlBase + "/DispatchEmployees/:id/dispatch",
              method: "GET",
            },

            // INTERNAL. Use DispatchEmployee.employee() instead.
            "prototype$__get__employee": {
              url: urlBase + "/DispatchEmployees/:id/employee",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#create
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/DispatchEmployees",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#createMany
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/DispatchEmployees",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#upsert
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/DispatchEmployees",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#replaceOrCreate
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/DispatchEmployees/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#exists
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/DispatchEmployees/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#findById
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/DispatchEmployees/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#replaceById
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/DispatchEmployees/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#find
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/DispatchEmployees",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#findOne
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/DispatchEmployees/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#updateAll
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/DispatchEmployees/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#deleteById
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/DispatchEmployees/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#count
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/DispatchEmployees/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#prototype$updateAttributes
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/DispatchEmployees/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#createChangeStream
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/DispatchEmployees/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Employee.dispatches.findById() instead.
            "::findById::Employee::dispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/dispatches/:fk",
              method: "GET",
            },

            // INTERNAL. Use Employee.dispatches.destroyById() instead.
            "::destroyById::Employee::dispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/dispatches/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.dispatches.updateById() instead.
            "::updateById::Employee::dispatches": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Employees/:id/dispatches/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Employee.dispatches() instead.
            "::get::Employee::dispatches": {
              isArray: true,
              url: urlBase + "/Employees/:id/dispatches",
              method: "GET",
            },

            // INTERNAL. Use Employee.dispatches.create() instead.
            "::create::Employee::dispatches": {
              url: urlBase + "/Employees/:id/dispatches",
              method: "POST",
            },

            // INTERNAL. Use Employee.dispatches.createMany() instead.
            "::createMany::Employee::dispatches": {
              isArray: true,
              url: urlBase + "/Employees/:id/dispatches",
              method: "POST",
            },

            // INTERNAL. Use Employee.dispatches.destroyAll() instead.
            "::delete::Employee::dispatches": {
              url: urlBase + "/Employees/:id/dispatches",
              method: "DELETE",
            },

            // INTERNAL. Use Employee.dispatches.count() instead.
            "::count::Employee::dispatches": {
              url: urlBase + "/Employees/:id/dispatches/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#patchOrCreate
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#updateOrCreate
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#update
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#destroyById
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#removeById
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#patchAttributes
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DispatchEmployee` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.DispatchEmployee#modelName
        * @propertyOf lbServices.DispatchEmployee
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DispatchEmployee`.
        */
        R.modelName = "DispatchEmployee";

    /**
     * @ngdoc object
     * @name lbServices.DispatchEmployee.createdBy
     * @header lbServices.DispatchEmployee.createdBy
     * @object
     * @description
     *
     * The object `DispatchEmployee.createdBy` groups methods
     * manipulating `User` instances related to `DispatchEmployee`.
     *
     * Call {@link lbServices.DispatchEmployee#createdBy DispatchEmployee.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#createManydBy
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::DispatchEmployee::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#createdBy
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::DispatchEmployee::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#lastUpdatedBy
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::DispatchEmployee::lastUpdatedBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#dispatch
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Fetches belongsTo relation dispatch.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Dispatch` object.)
             * </em>
             */
        R.dispatch = function() {
          var TargetResource = $injector.get("Dispatch");
          var action = TargetResource["::get::DispatchEmployee::dispatch"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DispatchEmployee#employee
             * @methodOf lbServices.DispatchEmployee
             *
             * @description
             *
             * Fetches belongsTo relation employee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.employee = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::DispatchEmployee::employee"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.WorkLog
 * @header lbServices.WorkLog
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `WorkLog` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "WorkLog",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/WorkLogs/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use WorkLog.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/WorkLogs/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use WorkLog.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/WorkLogs/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use WorkLog.maintain() instead.
            "prototype$__get__maintain": {
              url: urlBase + "/WorkLogs/:id/maintain",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#create
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/WorkLogs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#createMany
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/WorkLogs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#upsert
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/WorkLogs",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#replaceOrCreate
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/WorkLogs/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#exists
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/WorkLogs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#findById
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/WorkLogs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#replaceById
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/WorkLogs/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#find
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/WorkLogs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#findOne
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/WorkLogs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#updateAll
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/WorkLogs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#deleteById
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/WorkLogs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#count
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/WorkLogs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#prototype$updateAttributes
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/WorkLogs/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#createChangeStream
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/WorkLogs/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Maintain.workLogs.findById() instead.
            "::findById::Maintain::workLogs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Maintains/:id/workLogs/:fk",
              method: "GET",
            },

            // INTERNAL. Use Maintain.workLogs.destroyById() instead.
            "::destroyById::Maintain::workLogs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Maintains/:id/workLogs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Maintain.workLogs.updateById() instead.
            "::updateById::Maintain::workLogs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Maintains/:id/workLogs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Maintain.workLogs() instead.
            "::get::Maintain::workLogs": {
              isArray: true,
              url: urlBase + "/Maintains/:id/workLogs",
              method: "GET",
            },

            // INTERNAL. Use Maintain.workLogs.create() instead.
            "::create::Maintain::workLogs": {
              url: urlBase + "/Maintains/:id/workLogs",
              method: "POST",
            },

            // INTERNAL. Use Maintain.workLogs.createMany() instead.
            "::createMany::Maintain::workLogs": {
              isArray: true,
              url: urlBase + "/Maintains/:id/workLogs",
              method: "POST",
            },

            // INTERNAL. Use Maintain.workLogs.destroyAll() instead.
            "::delete::Maintain::workLogs": {
              url: urlBase + "/Maintains/:id/workLogs",
              method: "DELETE",
            },

            // INTERNAL. Use Maintain.workLogs.count() instead.
            "::count::Maintain::workLogs": {
              url: urlBase + "/Maintains/:id/workLogs/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.WorkLog#patchOrCreate
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#updateOrCreate
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#update
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#destroyById
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#removeById
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#patchAttributes
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `WorkLog` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.WorkLog#modelName
        * @propertyOf lbServices.WorkLog
        * @description
        * The name of the model represented by this $resource,
        * i.e. `WorkLog`.
        */
        R.modelName = "WorkLog";

    /**
     * @ngdoc object
     * @name lbServices.WorkLog.createdBy
     * @header lbServices.WorkLog.createdBy
     * @object
     * @description
     *
     * The object `WorkLog.createdBy` groups methods
     * manipulating `User` instances related to `WorkLog`.
     *
     * Call {@link lbServices.WorkLog#createdBy WorkLog.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.WorkLog#createManydBy
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::WorkLog::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#createdBy
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::WorkLog::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#lastUpdatedBy
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::WorkLog::lastUpdatedBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.WorkLog#maintain
             * @methodOf lbServices.WorkLog
             *
             * @description
             *
             * Fetches belongsTo relation maintain.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Maintain` object.)
             * </em>
             */
        R.maintain = function() {
          var TargetResource = $injector.get("Maintain");
          var action = TargetResource["::get::WorkLog::maintain"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ActivationCode
 * @header lbServices.ActivationCode
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ActivationCode` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ActivationCode",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ActivationCodes/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ActivationCode.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/ActivationCodes/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use ActivationCode.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/ActivationCodes/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use ActivationCode.equipment() instead.
            "prototype$__get__equipment": {
              url: urlBase + "/ActivationCodes/:id/equipment",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#create
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ActivationCodes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#createMany
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ActivationCodes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#upsert
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ActivationCodes",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#replaceOrCreate
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ActivationCodes/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#exists
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ActivationCodes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#findById
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ActivationCodes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#replaceById
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ActivationCodes/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#find
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ActivationCodes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#findOne
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ActivationCodes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#updateAll
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ActivationCodes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#deleteById
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ActivationCodes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#count
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ActivationCodes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#prototype$updateAttributes
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ActivationCodes/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#createChangeStream
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ActivationCodes/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#patchOrCreate
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#updateOrCreate
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#update
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#destroyById
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#removeById
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#patchAttributes
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ActivationCode` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ActivationCode#modelName
        * @propertyOf lbServices.ActivationCode
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ActivationCode`.
        */
        R.modelName = "ActivationCode";

    /**
     * @ngdoc object
     * @name lbServices.ActivationCode.createdBy
     * @header lbServices.ActivationCode.createdBy
     * @object
     * @description
     *
     * The object `ActivationCode.createdBy` groups methods
     * manipulating `User` instances related to `ActivationCode`.
     *
     * Call {@link lbServices.ActivationCode#createdBy ActivationCode.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#createManydBy
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ActivationCode::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#createdBy
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ActivationCode::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#lastUpdatedBy
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ActivationCode::lastUpdatedBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ActivationCode#equipment
             * @methodOf lbServices.ActivationCode
             *
             * @description
             *
             * Fetches belongsTo relation equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R.equipment = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::get::ActivationCode::equipment"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Container
 * @header lbServices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Container",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/containers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainers
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainers": {
              isArray: true,
              url: urlBase + "/containers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#createContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "createContainer": {
              url: urlBase + "/containers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#destroyContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "destroyContainer": {
              url: urlBase + "/containers/:container",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getContainer
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getContainer": {
              url: urlBase + "/containers/:container",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFiles
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFiles": {
              isArray: true,
              url: urlBase + "/containers/:container/files",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#getFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Container` object.)
             * </em>
             */
            "getFile": {
              url: urlBase + "/containers/:container/files/:file",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#removeFile
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `` – `{undefined=}` -
             */
            "removeFile": {
              url: urlBase + "/containers/:container/files/:file",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#upload
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `result` – `{object=}` -
             */
            "upload": {
              url: urlBase + "/containers/:container/upload",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Container#download
             * @methodOf lbServices.Container
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `container` – `{string=}` -
             *
             *  - `file` – `{string=}` -
             *
             *  - `req` – `{object=}` -
             *
             *  - `res` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "download": {
              url: urlBase + "/containers/:container/download/:file",
              method: "GET",
            },
          }
        );




        /**
        * @ngdoc property
        * @name lbServices.Container#modelName
        * @propertyOf lbServices.Container
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Container`.
        */
        R.modelName = "Container";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ExposureList
 * @header lbServices.ExposureList
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ExposureList` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ExposureList",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ExposureLists/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#create
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ExposureLists",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#createMany
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ExposureLists",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#upsert
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ExposureLists",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#replaceOrCreate
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ExposureLists/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#exists
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ExposureLists/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#findById
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ExposureLists/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#replaceById
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ExposureLists/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#find
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ExposureLists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#findOne
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ExposureLists/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#updateAll
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ExposureLists/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#deleteById
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ExposureLists/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#count
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ExposureLists/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#prototype$updateAttributes
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ExposureLists/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#createChangeStream
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ExposureLists/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ExposureList#patchOrCreate
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#updateOrCreate
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#update
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#destroyById
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#removeById
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ExposureList#patchAttributes
             * @methodOf lbServices.ExposureList
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ExposureList` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ExposureList#modelName
        * @propertyOf lbServices.ExposureList
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ExposureList`.
        */
        R.modelName = "ExposureList";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Accessory
 * @header lbServices.Accessory
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Accessory` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Accessory",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Accessories/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Accessory.equipment() instead.
            "prototype$__get__equipment": {
              url: urlBase + "/Accessories/:id/equipment",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accessory#create
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Accessories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accessory#createMany
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Accessories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accessory#upsert
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Accessories",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accessory#replaceOrCreate
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Accessories/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accessory#exists
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Accessories/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accessory#findById
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Accessories/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accessory#replaceById
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Accessories/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accessory#find
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Accessories",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accessory#findOne
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Accessories/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accessory#updateAll
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Accessories/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accessory#deleteById
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Accessories/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accessory#count
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Accessories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accessory#prototype$updateAttributes
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Accessories/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Accessory#createChangeStream
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Accessories/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Equipment.accessoryList.findById() instead.
            "::findById::Equipment::accessoryList": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/accessoryList/:fk",
              method: "GET",
            },

            // INTERNAL. Use Equipment.accessoryList.destroyById() instead.
            "::destroyById::Equipment::accessoryList": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/accessoryList/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.accessoryList.updateById() instead.
            "::updateById::Equipment::accessoryList": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Equipment/:id/accessoryList/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Equipment.accessoryList() instead.
            "::get::Equipment::accessoryList": {
              isArray: true,
              url: urlBase + "/Equipment/:id/accessoryList",
              method: "GET",
            },

            // INTERNAL. Use Equipment.accessoryList.create() instead.
            "::create::Equipment::accessoryList": {
              url: urlBase + "/Equipment/:id/accessoryList",
              method: "POST",
            },

            // INTERNAL. Use Equipment.accessoryList.createMany() instead.
            "::createMany::Equipment::accessoryList": {
              isArray: true,
              url: urlBase + "/Equipment/:id/accessoryList",
              method: "POST",
            },

            // INTERNAL. Use Equipment.accessoryList.destroyAll() instead.
            "::delete::Equipment::accessoryList": {
              url: urlBase + "/Equipment/:id/accessoryList",
              method: "DELETE",
            },

            // INTERNAL. Use Equipment.accessoryList.count() instead.
            "::count::Equipment::accessoryList": {
              url: urlBase + "/Equipment/:id/accessoryList/count",
              method: "GET",
            },

            // INTERNAL. Use ApplyAccessoryList.oldAccessoryInfo() instead.
            "::get::ApplyAccessoryList::oldAccessoryInfo": {
              url: urlBase + "/ApplyAccessoryLists/:id/oldAccessoryInfo",
              method: "GET",
            },

            // INTERNAL. Use ApplyAccessoryList.newAccessoryInfo() instead.
            "::get::ApplyAccessoryList::newAccessoryInfo": {
              url: urlBase + "/ApplyAccessoryLists/:id/newAccessoryInfo",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Accessory#patchOrCreate
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Accessory#updateOrCreate
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Accessory#update
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Accessory#destroyById
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Accessory#removeById
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Accessory#patchAttributes
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Accessory#modelName
        * @propertyOf lbServices.Accessory
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Accessory`.
        */
        R.modelName = "Accessory";


            /**
             * @ngdoc method
             * @name lbServices.Accessory#equipment
             * @methodOf lbServices.Accessory
             *
             * @description
             *
             * Fetches belongsTo relation equipment.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Equipment` object.)
             * </em>
             */
        R.equipment = function() {
          var TargetResource = $injector.get("Equipment");
          var action = TargetResource["::get::Accessory::equipment"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.NumberRecord
 * @header lbServices.NumberRecord
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `NumberRecord` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "NumberRecord",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/NumberRecords/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#create
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/NumberRecords",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#createMany
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/NumberRecords",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#upsert
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/NumberRecords",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#replaceOrCreate
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/NumberRecords/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#exists
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/NumberRecords/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#findById
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/NumberRecords/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#replaceById
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/NumberRecords/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#find
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/NumberRecords",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#findOne
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/NumberRecords/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#updateAll
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/NumberRecords/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#deleteById
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/NumberRecords/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#count
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/NumberRecords/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#prototype$updateAttributes
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/NumberRecords/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#createChangeStream
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/NumberRecords/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#getSerialNumber
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * <em>
             * (The remote method definition does not provide any description.)
             * </em>
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `recordType` – `{string}` -
             *
             *  - `recordDate` – `{date}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `serialNumber` – `{number=}` -
             */
            "getSerialNumber": {
              url: urlBase + "/NumberRecords/serialNumber",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#patchOrCreate
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#updateOrCreate
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#update
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#destroyById
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#removeById
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.NumberRecord#patchAttributes
             * @methodOf lbServices.NumberRecord
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `NumberRecord` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.NumberRecord#modelName
        * @propertyOf lbServices.NumberRecord
        * @description
        * The name of the model represented by this $resource,
        * i.e. `NumberRecord`.
        */
        R.modelName = "NumberRecord";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Service
 * @header lbServices.Service
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Service` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Service",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/Services/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Service#create
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Services",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Service#createMany
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Services",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Service#upsert
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/Services",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Service#replaceOrCreate
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Services/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Service#exists
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Services/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Service#findById
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Services/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Service#replaceById
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Services/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Service#find
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Services",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Service#findOne
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Services/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Service#updateAll
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/Services/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Service#deleteById
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Services/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Service#count
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Services/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Service#prototype$updateAttributes
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/Services/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Service#createChangeStream
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Services/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Dispatch.serviceInfo() instead.
            "::get::Dispatch::serviceInfo": {
              url: urlBase + "/Dispatches/:id/serviceInfo",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Service#patchOrCreate
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Service#updateOrCreate
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.Service#update
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Service#destroyById
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Service#removeById
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Service#patchAttributes
             * @methodOf lbServices.Service
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PersistedModel id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Service` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Service#modelName
        * @propertyOf lbServices.Service
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Service`.
        */
        R.modelName = "Service";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.DisposeRecord
 * @header lbServices.DisposeRecord
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DisposeRecord` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "DisposeRecord",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/DisposeRecords/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use DisposeRecord.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/DisposeRecords/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use DisposeRecord.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/DisposeRecords/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use DisposeRecord.report() instead.
            "prototype$__get__report": {
              url: urlBase + "/DisposeRecords/:id/report",
              method: "GET",
            },

            // INTERNAL. Use DisposeRecord.disposeEmployee() instead.
            "prototype$__get__disposeEmployee": {
              url: urlBase + "/DisposeRecords/:id/disposeEmployee",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#create
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/DisposeRecords",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#createMany
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/DisposeRecords",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#upsert
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/DisposeRecords",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#replaceOrCreate
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/DisposeRecords/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#exists
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/DisposeRecords/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#findById
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/DisposeRecords/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#replaceById
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/DisposeRecords/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#find
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/DisposeRecords",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#findOne
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/DisposeRecords/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#updateAll
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/DisposeRecords/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#deleteById
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/DisposeRecords/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#count
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/DisposeRecords/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#prototype$updateAttributes
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/DisposeRecords/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#createChangeStream
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/DisposeRecords/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Report.disposeRecords.findById() instead.
            "::findById::Report::disposeRecords": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Reports/:id/disposeRecords/:fk",
              method: "GET",
            },

            // INTERNAL. Use Report.disposeRecords.destroyById() instead.
            "::destroyById::Report::disposeRecords": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Reports/:id/disposeRecords/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Report.disposeRecords.updateById() instead.
            "::updateById::Report::disposeRecords": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Reports/:id/disposeRecords/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Report.disposeRecords() instead.
            "::get::Report::disposeRecords": {
              isArray: true,
              url: urlBase + "/Reports/:id/disposeRecords",
              method: "GET",
            },

            // INTERNAL. Use Report.disposeRecords.create() instead.
            "::create::Report::disposeRecords": {
              url: urlBase + "/Reports/:id/disposeRecords",
              method: "POST",
            },

            // INTERNAL. Use Report.disposeRecords.createMany() instead.
            "::createMany::Report::disposeRecords": {
              isArray: true,
              url: urlBase + "/Reports/:id/disposeRecords",
              method: "POST",
            },

            // INTERNAL. Use Report.disposeRecords.destroyAll() instead.
            "::delete::Report::disposeRecords": {
              url: urlBase + "/Reports/:id/disposeRecords",
              method: "DELETE",
            },

            // INTERNAL. Use Report.disposeRecords.count() instead.
            "::count::Report::disposeRecords": {
              url: urlBase + "/Reports/:id/disposeRecords/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#patchOrCreate
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#updateOrCreate
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#update
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#destroyById
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#removeById
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#patchAttributes
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `DisposeRecord` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.DisposeRecord#modelName
        * @propertyOf lbServices.DisposeRecord
        * @description
        * The name of the model represented by this $resource,
        * i.e. `DisposeRecord`.
        */
        R.modelName = "DisposeRecord";

    /**
     * @ngdoc object
     * @name lbServices.DisposeRecord.createdBy
     * @header lbServices.DisposeRecord.createdBy
     * @object
     * @description
     *
     * The object `DisposeRecord.createdBy` groups methods
     * manipulating `User` instances related to `DisposeRecord`.
     *
     * Call {@link lbServices.DisposeRecord#createdBy DisposeRecord.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#createManydBy
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::DisposeRecord::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#createdBy
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::DisposeRecord::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#lastUpdatedBy
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::DisposeRecord::lastUpdatedBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#report
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Fetches belongsTo relation report.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Report` object.)
             * </em>
             */
        R.report = function() {
          var TargetResource = $injector.get("Report");
          var action = TargetResource["::get::DisposeRecord::report"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.DisposeRecord#disposeEmployee
             * @methodOf lbServices.DisposeRecord
             *
             * @description
             *
             * Fetches belongsTo relation disposeEmployee.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.disposeEmployee = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::DisposeRecord::disposeEmployee"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.AccessoryStore
 * @header lbServices.AccessoryStore
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AccessoryStore` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "AccessoryStore",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/AccessoryStores/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use AccessoryStore.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/AccessoryStores/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use AccessoryStore.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/AccessoryStores/:id/lastUpdatedBy",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#create
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/AccessoryStores",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#createMany
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/AccessoryStores",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#upsert
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/AccessoryStores",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#replaceOrCreate
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/AccessoryStores/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#exists
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/AccessoryStores/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#findById
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/AccessoryStores/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#replaceById
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/AccessoryStores/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#find
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/AccessoryStores",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#findOne
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/AccessoryStores/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#updateAll
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/AccessoryStores/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#deleteById
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/AccessoryStores/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#count
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/AccessoryStores/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#prototype$updateAttributes
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/AccessoryStores/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#createChangeStream
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/AccessoryStores/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#patchOrCreate
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#updateOrCreate
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#update
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#destroyById
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#removeById
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#patchAttributes
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryStore` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.AccessoryStore#modelName
        * @propertyOf lbServices.AccessoryStore
        * @description
        * The name of the model represented by this $resource,
        * i.e. `AccessoryStore`.
        */
        R.modelName = "AccessoryStore";

    /**
     * @ngdoc object
     * @name lbServices.AccessoryStore.createdBy
     * @header lbServices.AccessoryStore.createdBy
     * @object
     * @description
     *
     * The object `AccessoryStore.createdBy` groups methods
     * manipulating `User` instances related to `AccessoryStore`.
     *
     * Call {@link lbServices.AccessoryStore#createdBy AccessoryStore.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#createManydBy
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::AccessoryStore::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#createdBy
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::AccessoryStore::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.AccessoryStore#lastUpdatedBy
             * @methodOf lbServices.AccessoryStore
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::AccessoryStore::lastUpdatedBy"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ApplyAccessoryList
 * @header lbServices.ApplyAccessoryList
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ApplyAccessoryList` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ApplyAccessoryList",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/ApplyAccessoryLists/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ApplyAccessoryList.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/ApplyAccessoryLists/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use ApplyAccessoryList.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/ApplyAccessoryLists/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use ApplyAccessoryList.application() instead.
            "prototype$__get__application": {
              url: urlBase + "/ApplyAccessoryLists/:id/application",
              method: "GET",
            },

            // INTERNAL. Use ApplyAccessoryList.oldAccessoryInfo() instead.
            "prototype$__get__oldAccessoryInfo": {
              url: urlBase + "/ApplyAccessoryLists/:id/oldAccessoryInfo",
              method: "GET",
            },

            // INTERNAL. Use ApplyAccessoryList.newAccessoryInfo() instead.
            "prototype$__get__newAccessoryInfo": {
              url: urlBase + "/ApplyAccessoryLists/:id/newAccessoryInfo",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#create
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ApplyAccessoryLists",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#createMany
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ApplyAccessoryLists",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#upsert
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/ApplyAccessoryLists",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#replaceOrCreate
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ApplyAccessoryLists/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#exists
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ApplyAccessoryLists/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#findById
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ApplyAccessoryLists/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#replaceById
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ApplyAccessoryLists/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#find
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ApplyAccessoryLists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#findOne
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ApplyAccessoryLists/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#updateAll
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/ApplyAccessoryLists/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#deleteById
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ApplyAccessoryLists/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#count
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ApplyAccessoryLists/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#prototype$updateAttributes
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/ApplyAccessoryLists/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#createChangeStream
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ApplyAccessoryLists/change-stream",
              method: "POST",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList.findById() instead.
            "::findById::AccessoryApplication::applyAccessoryList": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList/:fk",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList.destroyById() instead.
            "::destroyById::AccessoryApplication::applyAccessoryList": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList.updateById() instead.
            "::updateById::AccessoryApplication::applyAccessoryList": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList/:fk",
              method: "PUT",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList() instead.
            "::get::AccessoryApplication::applyAccessoryList": {
              isArray: true,
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList",
              method: "GET",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList.create() instead.
            "::create::AccessoryApplication::applyAccessoryList": {
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList",
              method: "POST",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList.createMany() instead.
            "::createMany::AccessoryApplication::applyAccessoryList": {
              isArray: true,
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList",
              method: "POST",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList.destroyAll() instead.
            "::delete::AccessoryApplication::applyAccessoryList": {
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList",
              method: "DELETE",
            },

            // INTERNAL. Use AccessoryApplication.applyAccessoryList.count() instead.
            "::count::AccessoryApplication::applyAccessoryList": {
              url: urlBase + "/AccessoryApplications/:id/applyAccessoryList/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#patchOrCreate
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#updateOrCreate
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#update
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#destroyById
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#removeById
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#patchAttributes
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ApplyAccessoryList` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ApplyAccessoryList#modelName
        * @propertyOf lbServices.ApplyAccessoryList
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ApplyAccessoryList`.
        */
        R.modelName = "ApplyAccessoryList";

    /**
     * @ngdoc object
     * @name lbServices.ApplyAccessoryList.createdBy
     * @header lbServices.ApplyAccessoryList.createdBy
     * @object
     * @description
     *
     * The object `ApplyAccessoryList.createdBy` groups methods
     * manipulating `User` instances related to `ApplyAccessoryList`.
     *
     * Call {@link lbServices.ApplyAccessoryList#createdBy ApplyAccessoryList.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#createManydBy
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ApplyAccessoryList::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#createdBy
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ApplyAccessoryList::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#lastUpdatedBy
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::ApplyAccessoryList::lastUpdatedBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#application
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Fetches belongsTo relation application.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `AccessoryApplication` object.)
             * </em>
             */
        R.application = function() {
          var TargetResource = $injector.get("AccessoryApplication");
          var action = TargetResource["::get::ApplyAccessoryList::application"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#oldAccessoryInfo
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Fetches belongsTo relation oldAccessoryInfo.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
        R.oldAccessoryInfo = function() {
          var TargetResource = $injector.get("Accessory");
          var action = TargetResource["::get::ApplyAccessoryList::oldAccessoryInfo"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ApplyAccessoryList#newAccessoryInfo
             * @methodOf lbServices.ApplyAccessoryList
             *
             * @description
             *
             * Fetches belongsTo relation newAccessoryInfo.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Accessory` object.)
             * </em>
             */
        R.newAccessoryInfo = function() {
          var TargetResource = $injector.get("Accessory");
          var action = TargetResource["::get::ApplyAccessoryList::newAccessoryInfo"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.SummaryStatement
 * @header lbServices.SummaryStatement
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SummaryStatement` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "SummaryStatement",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector',
      function(Resource, LoopBackAuth, $injector) {
        var R = Resource(
        urlBase + "/SummaryStatements/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use SummaryStatement.createdBy() instead.
            "prototype$__get__createdBy": {
              url: urlBase + "/SummaryStatements/:id/createdBy",
              method: "GET",
            },

            // INTERNAL. Use SummaryStatement.lastUpdatedBy() instead.
            "prototype$__get__lastUpdatedBy": {
              url: urlBase + "/SummaryStatements/:id/lastUpdatedBy",
              method: "GET",
            },

            // INTERNAL. Use SummaryStatement.creater() instead.
            "prototype$__get__creater": {
              url: urlBase + "/SummaryStatements/:id/creater",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#create
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/SummaryStatements",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#createMany
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/SummaryStatements",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#upsert
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
            "upsert": {
              url: urlBase + "/SummaryStatements",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#replaceOrCreate
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/SummaryStatements/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#exists
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/SummaryStatements/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#findById
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/SummaryStatements/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#replaceById
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/SummaryStatements/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#find
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/SummaryStatements",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#findOne
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/SummaryStatements/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#updateAll
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
            "updateAll": {
              url: urlBase + "/SummaryStatements/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#deleteById
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/SummaryStatements/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#count
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/SummaryStatements/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#prototype$updateAttributes
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
            "prototype$updateAttributes": {
              url: urlBase + "/SummaryStatements/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#createChangeStream
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/SummaryStatements/change-stream",
              method: "POST",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#patchOrCreate
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
        R["patchOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#updateOrCreate
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
        R["updateOrCreate"] = R["upsert"];

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#update
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The number of instances updated
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#destroyById
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#removeById
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#patchAttributes
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `SummaryStatement` object.)
             * </em>
             */
        R["patchAttributes"] = R["prototype$updateAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.SummaryStatement#modelName
        * @propertyOf lbServices.SummaryStatement
        * @description
        * The name of the model represented by this $resource,
        * i.e. `SummaryStatement`.
        */
        R.modelName = "SummaryStatement";

    /**
     * @ngdoc object
     * @name lbServices.SummaryStatement.createdBy
     * @header lbServices.SummaryStatement.createdBy
     * @object
     * @description
     *
     * The object `SummaryStatement.createdBy` groups methods
     * manipulating `User` instances related to `SummaryStatement`.
     *
     * Call {@link lbServices.SummaryStatement#createdBy SummaryStatement.createdBy()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#createManydBy
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createManydBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::SummaryStatement::createManydBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#createdBy
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Fetches belongsTo relation createdBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.createdBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::SummaryStatement::createdBy"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#lastUpdatedBy
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Fetches belongsTo relation lastUpdatedBy.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `User` object.)
             * </em>
             */
        R.lastUpdatedBy = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::SummaryStatement::lastUpdatedBy"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.SummaryStatement.creater
     * @header lbServices.SummaryStatement.creater
     * @object
     * @description
     *
     * The object `SummaryStatement.creater` groups methods
     * manipulating `Employee` instances related to `SummaryStatement`.
     *
     * Call {@link lbServices.SummaryStatement#creater SummaryStatement.creater()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#createManyr
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Fetches belongsTo relation creater.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.createManyr = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::SummaryStatement::createManyr"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.SummaryStatement#creater
             * @methodOf lbServices.SummaryStatement
             *
             * @description
             *
             * Fetches belongsTo relation creater.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Tracked id
             *
             *  - `refresh` – `{boolean=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Employee` object.)
             * </em>
             */
        R.creater = function() {
          var TargetResource = $injector.get("Employee");
          var action = TargetResource["::get::SummaryStatement::creater"];
          return action.apply(R, arguments);
        };


        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);
